"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _yargs = require("yargs");

var _testarmadaLogger = require("testarmada-logger");

var _testarmadaLogger2 = _interopRequireDefault(_testarmadaLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_testarmadaLogger2.default.prefix = "Local Executor";

exports.default = {
  getNightwatchConfig: function getNightwatchConfig(profile) {
    var config = {
      desiredCapabilities: profile.desiredCapabilities
    };

    _testarmadaLogger2.default.debug("executor config: " + JSON.stringify(config));
    return config;
  },

  getProfiles: function getProfiles(opts) {
    var argvMock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var runArgv = _yargs.argv;

    if (argvMock) {
      runArgv = argvMock;
    }
    if (runArgv.local_mocha || opts.settings.testFramework.name && opts.settings.testFramework.name === "testarmada-magellan-mocha-plugin") {
      // do nothing for mocha
      return new Promise(function (resolve) {
        return resolve([{ executor: "local", id: "mocha" }]);
      });
    } else {
      var configPath = opts.settings.testFramework.settings.nightwatchConfigFilePath;

      /*eslint-disable global-require*/
      var nightwatchConfig = require(_path2.default.resolve(configPath));
      var browsers = nightwatchConfig.test_settings;

      return new Promise(function (resolve) {
        if (runArgv.local_browser) {
          var localBrowser = runArgv.local_browser;
          if (browsers[localBrowser]) {
            var b = browsers[localBrowser];

            b.executor = "local";
            b.nightwatchEnv = localBrowser;
            b.id = localBrowser;

            _testarmadaLogger2.default.debug("detected profile: " + JSON.stringify(b));

            resolve([b]);
          }
        } else if (runArgv.local_browsers) {
          var tempBrowsers = runArgv.local_browsers.split(",");
          var returnBrowsers = [];

          _lodash2.default.forEach(tempBrowsers, function (browser) {
            if (browsers[browser]) {
              var _b = browsers[browser];

              _b.executor = "local";
              _b.nightwatchEnv = browser;
              _b.id = browser;

              returnBrowsers.push(_b);
            }
          });

          _testarmadaLogger2.default.debug("detected profiles: " + JSON.stringify(returnBrowsers));

          resolve(returnBrowsers);
        } else {
          resolve();
        }
      });
    }
  },

  /*eslint-disable global-require*/
  getCapabilities: function getCapabilities(profile, opts) {
    if (_yargs.argv.local_mocha || opts.settings.testFramework.name && opts.settings.testFramework.name === "testarmada-magellan-mocha-plugin") {
      // do nothing for mocha
      return new Promise(function (resolve) {
        return resolve({ executor: "local", id: "mocha" });
      });
    } else {
      var configPath = opts.settings.testFramework.settings.nightwatchConfigFilePath;
      var nightwatchConfig = require(_path2.default.resolve(configPath));
      var browsers = nightwatchConfig.test_settings;

      return new Promise(function (resolve, reject) {
        if (browsers[profile]) {
          var b = browsers[profile];

          b.executor = "local";
          b.nightwatchEnv = profile;
          b.id = profile;

          resolve(b);
        } else {
          reject("profile: " + profile + " isn't found");
        }
      });
    }
  },

  /*eslint-disable global-require*/
  listBrowsers: function listBrowsers(opts, callback) {
    if (_yargs.argv.local_mocha || opts.settings.testFramework.name && opts.settings.testFramework.name === "testarmada-magellan-mocha-plugin") {
      // do nothing for mocha
      return callback();
    } else {
      var configPath = opts.settings.testFramework.settings.nightwatchConfigFilePath;
      var nightwatchConfig = require(_path2.default.resolve(configPath));
      var browsers = nightwatchConfig.test_settings;

      var OMIT_BROWSERS = ["default", "sauce"];
      var listedBrowsers = [];

      _lodash2.default.forEach(browsers, function (capabilities, browser) {
        if (OMIT_BROWSERS.indexOf(browser) < 0) {
          _testarmadaLogger2.default.debug("  browser:    " + browser);
          _testarmadaLogger2.default.debug("  capabilities: " + JSON.stringify(capabilities));
          listedBrowsers.push(browser);
        }
      });

      _testarmadaLogger2.default.log("Available browsers from file " + configPath + ": " + listedBrowsers.join(","));

      return callback();
    }
  }
};
//# sourceMappingURL=profile.js.map