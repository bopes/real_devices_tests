{"version":3,"sources":["../src/profile.js"],"names":["prefix","getNightwatchConfig","profile","config","desiredCapabilities","debug","JSON","stringify","getProfiles","opts","argvMock","runArgv","local_mocha","settings","testFramework","name","Promise","resolve","executor","id","configPath","nightwatchConfigFilePath","nightwatchConfig","require","browsers","test_settings","local_browser","localBrowser","b","nightwatchEnv","local_browsers","tempBrowsers","split","returnBrowsers","forEach","browser","push","getCapabilities","reject","listBrowsers","callback","OMIT_BROWSERS","listedBrowsers","capabilities","indexOf","log","join"],"mappings":"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","file":"profile.js","sourcesContent":["import path from \"path\";\nimport _ from \"lodash\";\nimport { argv } from \"yargs\";\nimport logger from \"testarmada-logger\";\nlogger.prefix = \"Local Executor\";\n\nexport default {\n  getNightwatchConfig: (profile) => {\n    const config = {\n      desiredCapabilities: profile.desiredCapabilities\n    };\n\n    logger.debug(`executor config: ${JSON.stringify(config)}`);\n    return config;\n  },\n\n  getProfiles: (opts, argvMock = null) => {\n    let runArgv = argv;\n\n    if (argvMock) {\n      runArgv = argvMock;\n    }\n    if (runArgv.local_mocha\n      || opts.settings.testFramework.name\n      && opts.settings.testFramework.name === \"testarmada-magellan-mocha-plugin\") {\n      // do nothing for mocha\n      return new Promise((resolve) => resolve([{ executor: \"local\", id: \"mocha\" }]));\n    } else {\n      const configPath = opts.settings.testFramework.settings.nightwatchConfigFilePath;\n\n      /*eslint-disable global-require*/\n      const nightwatchConfig = require(path.resolve(configPath));\n      const browsers = nightwatchConfig.test_settings;\n\n      return new Promise((resolve) => {\n        if (runArgv.local_browser) {\n          const localBrowser = runArgv.local_browser;\n          if (browsers[localBrowser]) {\n            const b = browsers[localBrowser];\n\n            b.executor = \"local\";\n            b.nightwatchEnv = localBrowser;\n            b.id = localBrowser;\n\n            logger.debug(`detected profile: ${JSON.stringify(b)}`);\n\n            resolve([b]);\n          }\n        } else if (runArgv.local_browsers) {\n          const tempBrowsers = runArgv.local_browsers.split(\",\");\n          const returnBrowsers = [];\n\n          _.forEach(tempBrowsers, (browser) => {\n            if (browsers[browser]) {\n              const b = browsers[browser];\n\n              b.executor = \"local\";\n              b.nightwatchEnv = browser;\n              b.id = browser;\n\n              returnBrowsers.push(b);\n            }\n          });\n\n          logger.debug(`detected profiles: ${JSON.stringify(returnBrowsers)}`);\n\n          resolve(returnBrowsers);\n        } else {\n          resolve();\n        }\n      });\n    }\n  },\n\n  /*eslint-disable global-require*/\n  getCapabilities: (profile, opts) => {\n    if (argv.local_mocha\n      || opts.settings.testFramework.name\n      && opts.settings.testFramework.name === \"testarmada-magellan-mocha-plugin\") {\n      // do nothing for mocha\n      return new Promise((resolve) => resolve({ executor: \"local\", id: \"mocha\" }));\n    } else {\n      const configPath = opts.settings.testFramework.settings.nightwatchConfigFilePath;\n      const nightwatchConfig = require(path.resolve(configPath));\n      const browsers = nightwatchConfig.test_settings;\n\n      return new Promise((resolve, reject) => {\n        if (browsers[profile]) {\n          const b = browsers[profile];\n\n          b.executor = \"local\";\n          b.nightwatchEnv = profile;\n          b.id = profile;\n\n          resolve(b);\n        } else {\n          reject(`profile: ${profile} isn't found`);\n        }\n      });\n    }\n  },\n\n  /*eslint-disable global-require*/\n  listBrowsers: (opts, callback) => {\n    if (argv.local_mocha\n      || opts.settings.testFramework.name\n      && opts.settings.testFramework.name === \"testarmada-magellan-mocha-plugin\") {\n      // do nothing for mocha\n      return callback();\n    } else {\n      const configPath = opts.settings.testFramework.settings.nightwatchConfigFilePath;\n      const nightwatchConfig = require(path.resolve(configPath));\n      const browsers = nightwatchConfig.test_settings;\n\n      const OMIT_BROWSERS = [\"default\", \"sauce\"];\n      const listedBrowsers = [];\n\n\n      _.forEach(browsers, (capabilities, browser) => {\n        if (OMIT_BROWSERS.indexOf(browser) < 0) {\n          logger.debug(`  browser:    ${browser}`);\n          logger.debug(`  capabilities: ${JSON.stringify(capabilities)}`);\n          listedBrowsers.push(browser);\n        }\n      });\n\n      logger.log(`Available browsers from file ${configPath}: ${listedBrowsers.join(\",\")}`);\n\n      return callback();\n    }\n  }\n};\n"]}