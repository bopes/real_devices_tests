"use strict";

const Enviroment = require("./environment");

const utils = require("./utils");
const values = utils.values;

class Test {
  constructor(name) {
    this.name = name;
    this.environments = {};
    this.tags = [];
  }

  hasTag(tag) {
    for (const t of this.tags) {
      if (tag === t) {
        return true;
      }
    }
    return false;
  }

  get testRuns() {
    return values(this.environments).reduce((arr, env) => {
      for (const tr of env.attempts) {
        arr.push(tr);
      }
      return arr;
    }, []);
  }

  getEnvironment(environmentId) {
    if (this.environments[environmentId] === undefined) {
      this.environments[environmentId] = new Enviroment(environmentId, this);
    }
    return this.environments[environmentId];
  }

  getTestRun(environmentId, attempt) {
    return this.getEnvironment(environmentId).getAttempt(attempt);
  }

  get retried() {
    return values(this.environments).reduce((cur, env) => cur + (env.attempts.length - 1), 0);
  }

  get passed() {
    for (const env of values(this.environments)) {
      if (!env.passed) {
        return false;
      }
    }
    return true;
  }

  get timeRetrying() {
    return values(this.environments).reduce((cur, env) => cur + env.timeRetrying, 0);
  }

  get timeElapsed() {
    return values(this.environments).reduce((cur, env) => cur + env.timeElapsed, 0);
  }

  get timeForPassed() {
    return values(this.environments).reduce((cur, env) => cur + env.timeForPassed, 0);
  }
}

module.exports = Test;
