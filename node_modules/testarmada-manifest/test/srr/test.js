/* eslint import/no-extraneous-dependencies: 0, no-undef: 0, no-unused-expressions: 0 */

const expect = require("chai").expect;
const Test = require("../../src/srr/test");

describe("Test", () => {
  it("handle props", () => {
    const t = new Test("foo");
    expect(t.name).to.equal("foo");
    expect(t.testRuns.length).to.equal(0);
  });

  it("handle tags", () => {
    const t = new Test("foo");
    t.tags = ["foo"];
    expect(t.hasTag("foo")).to.equal(true);
    expect(t.hasTag("bar")).to.equal(false);
  });

  it("handle adding an environment", () => {
    const t = new Test("foo");
    const env = t.getEnvironment("chrome");
    env.getAttempt(1);
    env.getAttempt(2);
    expect(t.getTestRun("chrome", 1)).to.not.be.null;
  });

  it("handle calculating retries", () => {
    const t = new Test("foo");
    const env = t.getEnvironment("chrome");
    env.getAttempt(1);
    env.getAttempt(2);
    expect(t.retried).to.equal(1);
  });

  it("handle overall passing", () => {
    const t = new Test("foo");
    const env = t.getEnvironment("chrome");
    env.getAttempt(1);
    expect(t.passed).to.equal(false);
    env.getAttempt(2).passed = true;
    expect(t.passed).to.equal(true);
    expect(t.testRuns.length).to.equal(2);
  });

  it("handle flattening test runs", () => {
    const t = new Test("foo");

    const chrome = t.getEnvironment("chrome");
    chrome.getAttempt(1);
    chrome.getAttempt(2);

    const safari = t.getEnvironment("safari");
    safari.getAttempt(1);

    expect(t.testRuns.length).to.equal(3);
  });

  it("handle overall timing", () => {
    const t = new Test("foo");

    const chrome = t.getEnvironment("chrome");

    const catt1 = chrome.getAttempt(1);
    catt1.addMarker({t: 0, name: "start"});
    catt1.addMarker({t: 300, name: "end"});

    const catt2 = chrome.getAttempt(2);
    catt2.addMarker({t: 0, name: "start"});
    catt2.addMarker({t: 500, name: "end"});

    const safari = t.getEnvironment("safari");

    const satt1 = safari.getAttempt(1);
    satt1.addMarker({t: 0, name: "start"});
    satt1.addMarker({t: 300, name: "end"});

    expect(t.timeRetrying).to.equal(300);
    expect(t.timeElapsed).to.equal(1100);
  });

  it("handle time for passing", () => {
    const t = new Test("foo");

    const chrome = t.getEnvironment("chrome");

    const catt1 = chrome.getAttempt(1);
    catt1.addMarker({t: 0, name: "start"});
    catt1.addMarker({t: 300, name: "end"});

    const catt2 = chrome.getAttempt(2);
    catt2.addMarker({t: 0, name: "start"});
    catt2.addMarker({t: 500, name: "end"});
    catt2.passed = true;

    const safari = t.getEnvironment("safari");

    const satt1 = safari.getAttempt(1);
    satt1.addMarker({t: 0, name: "start"});
    satt1.addMarker({t: 300, name: "end"});
    satt1.passed = true;

    expect(t.timeForPassed).to.equal(800);
  });
});
