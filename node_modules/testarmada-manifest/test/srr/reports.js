/* eslint import/no-extraneous-dependencies: 0, no-undef: 0, no-unused-expressions: 0 */
"use strict";

const expect = require("chai").expect;
const Reports = require("../../src/srr/reports");

describe("Reports", () => {
  it("handle no tests", () => {
    const r = new Reports([]);
    expect(r.timeElapsed.top).to.eql([]);
    expect(r.timeElapsed.bottom).to.eql([]);
  });

  it("handle nothing passing", () => {
    const r = new Reports([
      {passed: false, environments: {}},
      {passed: false, environments: {}},
      {passed: false, environments: {}},
      {passed: false, environments: {}}
    ]);
    expect(r.timeElapsed.top).to.eql([]);
    expect(r.timeElapsed.bottom).to.eql([]);
  });

  it("handle a small passing set", () => {
    const t = [
      {passed: true, timeElapsed: 100, timeForPassed: 55, environments: {
        chrome: {passed: true, timeElapsed: 100, timeForPassed: 55, retries: []}
      }},
      {passed: true, timeElapsed: 50, timeForPassed: 50, environments: {
        chrome: {passed: true, timeElapsed: 50, timeForPassed: 50, retries: []}
      }},
      {passed: true, timeElapsed: 10, timeForPassed: 10, environments: {
        chrome: {passed: true, timeElapsed: 10, timeForPassed: 10, retries: []}
      }}
    ];
    const r = new Reports([
      {passed: false, environments: {}},
      t[0],
      {passed: false, environments: {}},
      t[1],
      {passed: false, environments: {}},
      t[2],
      {passed: false, environments: {}}
    ]);
    expect(r.timeElapsed.complete).to.eql([t[2], t[1], t[0]]);
    expect(r.timeElapsed.top).to.eql([t[2], t[1]]);
    expect(r.timeElapsed.bottom).to.eql([t[0]]);
    expect(r.timeForPassed.complete).to.eql([t[2], t[1], t[0]]);
    expect(r.timeForPassed.top).to.eql([t[2], t[1]]);
    expect(r.timeForPassed.bottom).to.eql([t[0]]);
  });

  it("handle giving some statistics", () => {
    const r = new Reports([
      {passed: true, timeElapsed: 70, timeForPassed: 35, environments: {
        chrome: {passed: true, timeElapsed: 70, timeForPassed: 35, retries: []}
      }},
      {passed: true, timeElapsed: 50, timeForPassed: 50, environments: {
        chrome: {passed: true, timeElapsed: 50, timeForPassed: 50, retries: []}
      }},
      {passed: true, timeElapsed: 60, timeForPassed: 50, environments: {
        chrome: {passed: true, timeElapsed: 60, timeForPassed: 50, retries: []}
      }}
    ]);
    expect(r.timeElapsed.average).to.eql(60);
    expect(r.timeElapsed.stddev).to.eql(8.16496580927726);
    expect(r.timeForPassed.average).to.eql(45);
    expect(r.timeForPassed.stddev).to.eql(7.0710678118654755);
    expect(r.byEnvironment.chrome).not.to.be.null;
    expect(r.byEnvironment.chrome.min).to.eql(35);
    expect(r.byEnvironment.chrome.max).to.eql(50);
    expect(r.byEnvironment.chrome.average).to.eql(45);
    expect(r.byEnvironment.chrome.stddev).to.eql(7.0710678118654755);
    expect(r.byEnvironment.chrome.avgRetries).to.eql(0);
  });

  it("handle a larger passing set", () => {
    const reps = [];
    for (let i = 0; i < 100; i++) {
      reps.push({passed: true, timeElapsed: i + 20, timeForPassed: i + 1, environments: {
        chrome: {passed: true, timeElapsed: i + 10, timeForPassed: i + 10, retries: [{}, {}]},
        safari: {passed: true, timeElapsed: i + 5, timeForPassed: i + 5, retries: [{}]}
      }});
    }
    const r = new Reports(reps);
    expect(r.timeElapsed.top).to.eql(reps.slice(0, 10));
    expect(r.timeElapsed.bottom).to.eql(reps.slice(-10));
    expect(r.timeForPassed.top).to.eql(reps.slice(0, 10));
    expect(r.timeForPassed.bottom).to.eql(reps.slice(-10));
    expect(r.byEnvironment.chrome.avgRetries).to.eql(2);
    expect(r.byEnvironment.safari.avgRetries).to.eql(1);
  });
});
