/* eslint import/no-extraneous-dependencies: 0, no-undef: 0,
  no-unused-expressions: 0, max-params: 0, max-statements: 0 */
"use strict";

const chai = require("chai");
const expect = chai.expect;
const SuiteRunResult = require("../src/suite-run-result");
const completeData = require("./data/complete-data-m10");
const spies = require("chai-spies");

chai.use(spies);

class MagellanRunBuilder {
  constructor(srr) {
    this.srr = srr;
    this.time = 1477673495973;
    this.testId = 1;
    this.sendGlobalAnalyticsEvent("magellan-run", "start");
  }

  addIdleTimeWithMark(deltaT) {
    this.sendGlobalAnalyticsEventMark("magellan-busy", "idle", deltaT);
  }

  addIdleTime(deltaT) {
    this.sendGlobalAnalyticsEvent("magellan-busy", "idle", deltaT);
  }

  addBusyTimeWithMark(deltaT) {
    this.sendGlobalAnalyticsEventMark("magellan-busy", "busy", deltaT);
  }

  addBusyTime(deltaT) {
    this.sendGlobalAnalyticsEvent("magellan-busy", "busy", deltaT);
  }

  startWorker(id, deltaT) {
    this.sendGlobalAnalyticsEvent(`acquire-worker-${id}`, "start", deltaT);
  }

  endWorker(id, deltaT) {
    this.sendGlobalAnalyticsEventMark(`acquire-worker-${id}`, "end", deltaT);
  }

  failWorker(id, deltaT) {
    this.sendGlobalAnalyticsEventMark(`acquire-worker-${id}`, "failed", deltaT);
  }

  finish(state, deltaT) {
    this.sendGlobalAnalyticsEventMark("magellan-run", state || "passed", deltaT || 0);
  }

  startTest(testName, environmentId, attempt, testId) {
    const _testId = `test-run-${testId}`;
    this.srr.testRunMessage(
      this._testRun(testName, environmentId, _testId),
      this._test(testName, environmentId, attempt),
      {
        "type": "worker-status",
        "status": "started",
        "name": testName
      }
    );

    this.srr.testRunMessage(
      this._testRun(testName, environmentId, _testId),
      this._test(testName, environmentId, attempt),
      {
        "type": "analytics-event",
        "data": {
          "name": testId,
          "markers": [
            {
              "name": "start",
              "t": this.t
            }
          ],
          "metadata": {
            "test": testName,
            "profile": environmentId,
            "attemptNumber": attempt
          }
        }
      }
    );

    this.testId++;
  }

  testRunMark(testName, environmentId, attempt, message, testId, deltaT) {
    this.time += deltaT;

    const _testId = `test-run-${testId}`;
    this.srr.testRunMessage(
      this._testRun(testName, environmentId, _testId),
      this._test(testName, environmentId, attempt),
      {
        "type": "analytics-event-mark",
        "eventName": testId,
        "data": {
          "name": message,
          "t": this.time
        }
      }
    );
  }

  finishTest(testName, environmentId, attempt, passed, testId, deltaT) {
    this.time += deltaT;

    const _testId = `test-run-${testId}`;
    this.srr.testRunMessage(
      this._testRun(testName, environmentId, _testId),
      this._test(testName, environmentId, attempt),
      {
        "type": "worker-status",
        "status": "finished",
        "name": testName,
        passed,
        "metadata": {
          "resultURL": "https://saucelabs.com/tests/31719756-210e-446b-bd23-cb88c5120147"
        }
      }
    );
  }

  completeTest(testName, environmentId, attempt, passed) {
    const _environmentId = environmentId || "chrome";
    const _attempt = attempt || 0;
    const _passed = passed !== undefined ? passed : true;
    this.startTest(testName, _environmentId, _attempt, this.testId);
    this.testRunMark(testName, _environmentId, _attempt,
      _passed ? "passed" : "failed", this.testId, 100);
    this.finishTest(testName, _environmentId, _attempt, _passed, this.testId, 100);
    this.testId++;
  }

  sendGlobalAnalyticsEventMark(eventName, markerName, deltaT) {
    this.time += deltaT || 0;
    this.srr.globalMessage({
      "type": "analytics-event-mark",
      eventName,
      "data": {
        name: markerName,
        "t": this.time
      }
    });
  }

  sendGlobalAnalyticsEvent(name, markerName, deltaT) {
    this.time += deltaT || 0;
    this.srr.globalMessage({
      "type": "analytics-event",
      "data": {
        name,
        "markers": [
          {
            "name": markerName,
            "t": this.time
          }
        ]
      }
    });
  }

  _testRun(filename, environmentId, testId) {
    return {
      "guid": testId,
      "buildId": "magellan-516b4a60d8909",
      "tempAssetPath": "build-magellan-516b4a60d8909_155c2a55771841__temp_assets",
      "environmentId": environmentId || "chrome",
      "locator": {
        filename
      },
      "seleniumPort": 12001,
      "mockingPort": 12000,
      "configPath": "build-magellan-516b4a60d8909_155c2a55771841__temp_assets/nightwatch.json"
    };
  }

  _test(filename, environmentId, attempts) {
    return {
      "locator": {
        filename
      },
      "maxAttempts": 3,
      "attempts": attempts || 0,
      "status": 1,
      "profile": {
        "id": environmentId || "chrome"
      },
      "workerIndex": -1,
      "stdout": "",
      "stderr": "",
      "startTime": this.time
    };
  }
}

describe("SuiteRunResult for magellan@10", () => {
  it("should find no tests", () => {
    const srr = new SuiteRunResult();
    expect(srr.tests.length).to.eql(0);
  });

  it("should calculate the total time", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    expect(srr.suitePassed).to.eql(null);
    expect(srr.startTime).to.eql(mrb.time);
    mrb.finish("passed", 100);
    expect(srr.totalTime).to.eql(100);
    expect(srr.suitePassed).to.eql(true);
  });

  it("should process failed", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    mrb.finish("failed");
    expect(srr.suitePassed).to.eql(false);
  });

  it("should calculate idle time with marks", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addIdleTimeWithMark(100);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addIdleTimeWithMark(200);
    mrb.finish("failed");
    expect(srr.totalIdleTime).to.eql(200);
  });

  it("should calculate idle time without marks", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addIdleTime(100);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addIdleTime(200);
    mrb.finish("failed");
    expect(srr.totalIdleTime).to.eql(200);
  });

  it("should calculate busy time with marks", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    expect(srr.totalBusyTime).to.eql(0);
    mrb.addBusyTimeWithMark(100);
    expect(srr.totalBusyTime).to.eql(0);
    mrb.addBusyTimeWithMark(200);
    mrb.finish("failed");
    expect(srr.totalBusyTime).to.eql(200);
  });

  it("should calculate busy time without marks", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    expect(srr.totalBusyTime).to.eql(0);
    mrb.addBusyTime(100);
    expect(srr.totalBusyTime).to.eql(0);
    mrb.addBusyTime(200);
    mrb.finish("failed");
    expect(srr.totalBusyTime).to.eql(200);
  });

  it("should handle interspersed idle", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    expect(srr.totalBusyTime).to.eql(0);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addIdleTimeWithMark(100);
    mrb.addBusyTimeWithMark(100);
    expect(srr.totalBusyTime).to.eql(0);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addIdleTimeWithMark(100);
    mrb.addIdleTimeWithMark(200);
    mrb.finish("failed");
    expect(srr.totalIdleTime).to.eql(200);
  });

  it("should handle interspersed busy", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    expect(srr.totalBusyTime).to.eql(0);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addBusyTimeWithMark(100);
    mrb.addIdleTimeWithMark(100);
    expect(srr.totalBusyTime).to.eql(0);
    expect(srr.totalIdleTime).to.eql(0);
    mrb.addBusyTimeWithMark(100);
    mrb.addBusyTimeWithMark(200);
    mrb.finish("failed");
    expect(srr.totalBusyTime).to.eql(200);
  });

  it("should track a worker", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    mrb.startWorker("foo", 0);
    mrb.endWorker("foo", 200);
    expect(srr.workers.foo).to.not.be.null;
    expect(srr.workers.foo.markers.length).to.eql(2);
    expect(srr.workers.foo.failed).to.eql(false);
    expect(srr.workers.foo.satisfied).to.eql(true);
    expect(srr.workers.foo.timeElapsed).to.eql(200);
    expect(srr.satisfiedWorkers.length).to.eql(1);
  });

  it("should track a failed worker", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    mrb.startWorker("foo", 0);
    mrb.failWorker("foo", 200);
    expect(srr.workers.foo).to.not.be.null;
    expect(srr.workers.foo.markers.length).to.eql(2);
    expect(srr.workers.foo.failed).to.eql(true);
    expect(srr.workers.foo.satisfied).to.eql(false);
    expect(srr.workers.foo.timeElapsed).to.eql(200);
    expect(srr.unsatisfiedWorkers.length).to.eql(1);
  });

  it("should pass a test", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    mrb.completeTest("/mytests.js");
    expect(srr.tests.length).to.eql(1);
    expect(srr.tests[0].passed).to.eql(true);
    expect(srr.tests[0].environments.chrome).to.not.be.null;
    expect(srr.tests[0].environments.chrome.attempts.length).to.eql(1);
  });

  it("should handle tests against multiple environments", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    mrb.completeTest("/mytests.js");
    mrb.completeTest("/mytests.js", "safari");
    expect(srr.tests.length).to.eql(1);
    expect(srr.tests[0].passed).to.eql(true);
    expect(srr.tests[0].environments.chrome).to.not.be.null;
    expect(srr.tests[0].environments.chrome.attempts.length).to.eql(1);
    expect(srr.tests[0].environments.safari).to.not.be.null;
    expect(srr.tests[0].environments.safari.attempts.length).to.eql(1);
  });

  it("should handle tests against multiple environments with a failure", () => {
    const srr = new SuiteRunResult();
    const mrb = new MagellanRunBuilder(srr);
    mrb.completeTest("/mytests.js");
    mrb.completeTest("/mytests.js", "safari", 0, false);
    expect(srr.tests.length).to.eql(1);
    expect(srr.tests[0].passed).to.eql(false);
    expect(srr.tests[0].retried).to.eql(0);
    expect(srr.tests[0].environments.chrome).to.not.be.null;
    expect(srr.tests[0].environments.chrome.attempts.length).to.eql(1);
    expect(srr.tests[0].environments.safari).to.not.be.null;
    expect(srr.tests[0].environments.safari.attempts.length).to.eql(1);
    expect(srr.tests[0].environments.safari.passed).to.eql(false);
  });

  it("should handle emit events on bad messages", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("unknownGlobalMessage", badMsgSpy);
    srr.globalMessage({});
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad analytics-event messages", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("unknownGlobalMessage", badMsgSpy);
    srr.globalMessage({
      type: "analytics-event"
    });
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad analytics-event messages with bad data", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("unknownGlobalMessage", badMsgSpy);
    srr.globalMessage({
      type: "analytics-event",
      data: {}
    });
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad analytics-event messages with bad data with a name", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("unknownGlobalMessage", badMsgSpy);
    srr.globalMessage({
      type: "analytics-event",
      data: {
        name: "foobar"
      }
    });
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad analytics-event-mark messages", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("unknownGlobalMessage", badMsgSpy);
    srr.globalMessage({
      type: "analytics-event-mark"
    });
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad analytics-event-mark messages with unknown names", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("unknownGlobalMessage", badMsgSpy);
    srr.globalMessage({
      type: "analytics-event-mark",
      eventName: "foobar"
    });
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad test run messages", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("onUnknownTestRunMessage", badMsgSpy);
    srr.testRunMessage({}, {}, {});
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad test run messages with an empty locator", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("onUnknownTestRunMessage", badMsgSpy);
    srr.testRunMessage({}, {locator: {}}, {});
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad test run messages with an no browser", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("onUnknownTestRunMessage", badMsgSpy);
    srr.testRunMessage({}, {profile: {}}, {});
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad test run messages with a weird type", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("onUnknownTestRunMessage", badMsgSpy);
    srr.testRunMessage({}, {locator: {filename: "foo"}, profile: {id: "bar"}, attempts: 1},
      {
        type: "bar"
      });
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle emit events on bad test run messages with a bad worker-status", () => {
    const srr = new SuiteRunResult();
    const badMsgSpy = chai.spy();
    srr.on("onUnknownTestRunMessage", badMsgSpy);
    srr.testRunMessage({}, {locator: {filename: "foo"}, profile: {id: "bar"}, attempts: 1},
      {
        type: "worker-status",
        status: "bar"
      });
    expect(badMsgSpy).to.have.been.called;
  });

  it("should handle tags", () => {
    const srr = new SuiteRunResult();
    for (const message of completeData) {
      if (message.type === "global") {
        srr.globalMessage(message.message);
      } else {
        srr.testRunMessage(message.testRun, message.test, message.message);
      }
    }

    expect(srr.testsByTag("foo").length).to.eql(0);
    expect(srr.timeElapsedByTag("foo")).to.eql(0);
    expect(srr.passedByTag("foo")).to.eql(0);
    expect(srr.failedByTag("foo")).to.eql(0);

    srr.setTags("test/tests//simple.js", ["foo"]);
    expect(srr.testsByTag("foo").length).to.eql(1);
    expect(srr.timeElapsedByTag("foo")).to.eql(9623);
    expect(srr.passedByTag("foo")).to.eql(1);
    expect(srr.failedByTag("foo")).to.eql(0);

    srr.setTags("test/tests//simple.js", ["foo", "bar"]);
    expect(srr.testsByTag("bar").length).to.eql(1);
    expect(srr.testsByTag("foo").length).to.eql(1);

    srr.setTags("test/tests//simple.js", ["foo", "bar", "baz"]);
    expect(srr.testsByTag("bar").length).to.eql(1);
    expect(srr.testsByTag("foo").length).to.eql(1);
  });

  it("should handle the complete data set", () => {
    const srr = new SuiteRunResult();

    const startSpy = chai.spy();
    srr.on("start", startSpy);
    const endSpy = chai.spy();
    srr.on("end", endSpy);
    const newTestSpy = chai.spy();
    srr.on("newTest", newTestSpy);
    const testRunEndSpy = chai.spy();
    srr.on("testRunEnd", testRunEndSpy);
    const testRunStartSpy = chai.spy();
    srr.on("testRunStart", testRunStartSpy);

    for (const message of completeData) {
      if (message.type === "global") {
        srr.globalMessage(message.message);
      } else {
        srr.testRunMessage(message.testRun, message.test, message.message);
      }
    }

    expect(testRunStartSpy).to.have.been.called.once;
    expect(testRunEndSpy).to.have.been.called.once;
    expect(newTestSpy).to.have.been.called.once;
    expect(startSpy).to.have.been.called.once;
    expect(endSpy).to.have.been.called.once;

    expect(srr.tests.length).to.eql(1);
    expect(srr.testRuns.length).to.eql(1);
    expect(srr.testsByEnvironment.chrome.length).to.eql(1);
    expect(srr.testsByEnvironmentReport.chrome.passed).to.eql(1);
    expect(srr.testsByEnvironmentReport.chrome.failed).to.eql(0);
    expect(srr.testsByEnvironmentReport.chrome.finallyPassed).to.eql(0);
    expect(srr.testsByNameReport["test/tests//simple.js"].passed).to.eql(1);
    expect(srr.testsByNameReport["test/tests//simple.js"].failed).to.eql(0);
    expect(srr.testsByNameReport["test/tests//simple.js"].finallyPassed).to.eql(0);

    expect(srr.passed).to.eql(1);
    expect(srr.failed).to.eql(0);
    expect(srr.retried).to.eql(0);

    expect(srr.timeFailing).to.eql(0);
    expect(srr.timePassing).to.eql(9623);
    expect(srr.timeRetrying).to.eql(0);
    expect(srr.satisfiedWorkers.length).to.eql(1);
    expect(srr.unsatisfiedWorkers.length).to.eql(0);
    expect(srr.satisfiedWorkersTime).to.eql(1021);
    expect(srr.unsatisfiedWorkersTime).to.eql(0);
  });
});
