{"version":3,"sources":["../src/profile.js"],"names":["getNightwatchConfig","profile","browserstackSettings","prefix","capabilities","assign","desiredCapabilities","user","key","useTunnels","localIdentifier","moreLogs","realDevice","realMobile","app","config","debug","JSON","stringify","getProfiles","opts","argvMock","runArgv","initialize","then","Promise","resolve","bs_browser","p","get","executor","nightwatchEnv","id","bs_browsers","tempBrowsers","split","returnBrowsers","forEach","browser","b","trim","push","getCapabilities","reject","resolution","orientation","deviceOrientation","appium","merge","e","listBrowsers","callback","browsers","table","cliList","loghelp","toString","catch","err","stack"],"mappings":"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","file":"profile.js","sourcesContent":["import _ from \"lodash\";\nimport { argv } from \"yargs\";\nimport logger from \"testarmada-logger\";\nimport Pancake from \"./pancake\";\n\nexport default {\n  getNightwatchConfig: (profile, browserstackSettings) => {\n    logger.prefix = \"Browserstack Executor\";\n    const capabilities = _.assign({}, profile.desiredCapabilities);\n\n    capabilities[\"browserstack.user\"] = browserstackSettings.user;\n    capabilities[\"browserstack.key\"] = browserstackSettings.key;\n\n    if (browserstackSettings.useTunnels) {\n      capabilities[\"browserstack.local\"] = true;\n      capabilities[\"browserstack.localIdentifier\"] = browserstackSettings.localIdentifier;\n    }\n\n\n    if (browserstackSettings.moreLogs) {\n      capabilities[\"browserstack.debug\"] = true;\n      capabilities[\"browserstack.networkLogs\"] = true;\n    }\n\n    if (browserstackSettings.realDevice) {\n      // hardcode for now\n      capabilities.realMobile = true;\n    }\n\n    if (browserstackSettings.app) {\n      capabilities.app = browserstackSettings.app;\n    }\n\n    const config = {\n      desiredCapabilities: capabilities\n    };\n\n    logger.debug(`executor config: ${JSON.stringify(config)}`);\n    return config;\n  },\n\n  getProfiles: (opts, argvMock = null) => {\n    logger.prefix = \"Browserstack Executor\";\n    let runArgv = argv;\n\n    if (argvMock) {\n      runArgv = argvMock;\n    }\n\n    return Pancake\n      .initialize()\n      .then(() => {\n        return new Promise((resolve) => {\n          if (runArgv.bs_browser) {\n            const p = {\n              desiredCapabilities: Pancake.get(runArgv.bs_browser),\n              executor: \"browserstack\",\n              nightwatchEnv: \"browserstack\",\n              id: runArgv.bs_browser\n            };\n\n            logger.debug(`detected profile: ${JSON.stringify(p)}`);\n\n            resolve(p);\n          } else if (runArgv.bs_browsers) {\n            const tempBrowsers = runArgv.bs_browsers.split(\",\");\n            const returnBrowsers = [];\n\n            _.forEach(tempBrowsers, (browser) => {\n              const b = browser.trim();\n              const p = {\n                desiredCapabilities: Pancake.get(b),\n                executor: \"browserstack\",\n                nightwatchEnv: \"browserstack\",\n                // id is for magellan reporter\n                id: b\n              };\n\n              returnBrowsers.push(p);\n            });\n\n            logger.debug(`detected profiles: ${JSON.stringify(returnBrowsers)}`);\n\n            resolve(returnBrowsers);\n          } else {\n            resolve();\n          }\n        });\n      });\n  },\n\n  /*eslint-disable no-unused-vars*/\n  getCapabilities: (profile, opts) => {\n    logger.prefix = \"Browserstack Executor\";\n    // profile key mapping\n    // browser => id\n    // resolution => resolution\n    // orientation => deviceOrientation\n\n    const id = profile.browser;\n\n    return Pancake\n      .initialize()\n      .then(() => {\n        return new Promise((resolve, reject) => {\n          try {\n            const desiredCapabilities = Pancake.get(id);\n            // add executor info back to capabilities\n\n            if (profile.resolution) {\n              desiredCapabilities.resolution = profile.resolution;\n            }\n\n            if (profile.orientation) {\n              desiredCapabilities.deviceOrientation = profile.orientation;\n            }\n            const p = {\n              desiredCapabilities,\n              executor: profile.executor,\n              nightwatchEnv: profile.executor,\n              id\n            };\n\n            // for appium test\n            if (profile.appium) {\n              p.desiredCapabilities = _.merge(p.desiredCapabilities, profile.appium);\n            }\n\n            resolve(p);\n          } catch (e) {\n            reject(`Executor browserstack cannot resolve profile \n            ${JSON.stringify(profile)}`);\n          }\n        });\n      });\n  },\n\n  listBrowsers: (opts, callback) => {\n    logger.prefix = \"Browserstack Executor\";\n    Pancake\n      .initialize()\n      .then((browsers) => {\n        const table = Pancake.cliList();\n        logger.loghelp(table.toString());\n        callback(null, browsers);\n      })\n      .catch((err) => {\n        logger.err(`Couldn't fetch browserstack browsers. Error: ${err}`);\n        logger.err(err.stack);\n        callback(err);\n      });\n  }\n};\n"]}