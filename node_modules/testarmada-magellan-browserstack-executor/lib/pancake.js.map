{"version":3,"sources":["../src/pancake.js"],"names":["BROWSERSTACK_API_URL","browserCache","initialize","ignoreCache","argvMock","envMock","prefix","self","config","Promise","resolve","reject","keys","length","validateConfig","e","options","user","key","get","err","response","body","_buildBrowserCache","JSON","parse","id","cliList","loghelp","families","groupBy","capabilities","browser","table","head","count","Object","sort","forEach","family","push","red","capitalize","currentFamily","_generateKey","blackBright","browser_version","os","os_version","device","values","join","replace","browserstackResponse"],"mappings":"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","file":"pancake.js","sourcesContent":["import _ from \"lodash\";\nimport request from \"request\";\nimport Table from \"cli-table\";\nimport clc from \"cli-color\";\nimport logger from \"testarmada-logger\";\nimport configuration from \"./configuration\";\n\nconst BROWSERSTACK_API_URL = \"https://www.browserstack.com/automate/browsers.json\";\nlet browserCache = {};\n\nexport default {\n  initialize(ignoreCache = false, argvMock = null, envMock = null) {\n    logger.prefix = \"Browserstack Executor\";\n    const self = this;\n    let config = null;\n\n    return new Promise((resolve, reject) => {\n      if (!ignoreCache\n        && _.keys(browserCache).length > 0) {\n        resolve(browserCache);\n      } else {\n        try {\n          config = configuration.validateConfig({}, argvMock, envMock);\n        } catch (e) {\n          reject(e);\n        }\n        const options = {\n          \"auth\": {\n            \"user\": config.user,\n            \"pass\": config.key,\n            \"sendImmediately\": false\n          }\n        };\n\n        request.get(BROWSERSTACK_API_URL, options, (err, response, body) => {\n          if (err) {\n            reject(err);\n          }\n\n          self._buildBrowserCache(JSON.parse(body));\n          resolve(browserCache);\n        });\n      }\n    });\n  },\n\n  get(id) {\n    if (_.keys(browserCache).length > 0) {\n      return browserCache[id];\n    }\n\n    return null;\n  },\n\n  cliList() {\n    logger.prefix = \"Browserstack Executor\";\n    const self = this;\n\n    if (_.keys(browserCache).length > 0) {\n      logger.loghelp(\"Available Browserstack Browsers:\");\n\n      const families = _.groupBy(browserCache, (capabilities) => capabilities.browser);\n      const table = new Table({\n        head: [\"Family\", \"Alias\", \"Browser/Env\", \"Version\", \"OS\", \"OS Version\", \"Device\"]\n      });\n\n      let count = 1;\n\n      Object.keys(families).sort().forEach((family) => {\n        table.push([clc.red(_.capitalize(family))]);\n        const currentFamily = families[family];\n\n        _.forEach(currentFamily, (capabilities) => {\n          const key = self._generateKey(capabilities);\n          table.push([\n            clc.blackBright(`${count}.`),\n            key,\n            _.capitalize(capabilities.browser),\n            capabilities.browser_version ? capabilities.browser_version : \"N/A\",\n            _.capitalize(capabilities.os),\n            capabilities.os_version,\n            capabilities.device ? capabilities.device : \"N/A\"\n          ]);\n          count++;\n        });\n      });\n\n      return table;\n    }\n\n    return null;\n  },\n\n  _generateKey(capabilities) {\n    const values = [];\n\n    values.push(capabilities.browser);\n\n    if (capabilities.browser_version) {\n      values.push(capabilities.browser_version);\n    }\n\n    values.push(capabilities.os);\n    values.push(capabilities.os_version);\n\n    if (capabilities.device) {\n      values.push(capabilities.device);\n    }\n\n    const key = values.join(\"_\").replace(/(\\.|\\s)/g, \"_\");\n    return key;\n  },\n\n  _buildBrowserCache(browserstackResponse) {\n    const self = this;\n    browserCache = {};\n\n    _.forEach(browserstackResponse, (capabilities) => {\n      const key = self._generateKey(capabilities);\n      browserCache[key] = capabilities;\n    });\n\n  }\n};\n"]}