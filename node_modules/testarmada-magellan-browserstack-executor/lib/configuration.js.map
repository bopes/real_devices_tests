{"version":3,"sources":["../src/configuration.js"],"names":["getConfig","prefix","debug","JSON","stringify","config","validateConfig","opts","argvMock","envMock","runArgv","env","process","key","BROWSERSTACK_ACCESS_KEY","user","BROWSERSTACK_USER","localIdentifier","bs_tunnel_id","useTunnels","bs_create_tunnel","moreLogs","bs_enable_more_logs","realDevice","bs_real_device","app","bs_app","parameterWarnings","required","envKey","bs_browser","bs_browsers","isEnabled","valid","forEach","v","k","err","Error","log"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe;AACbA,aAAW,qBAAM;AACf,+BAAOC,MAAP,GAAgB,uBAAhB;AACA,+BAAOC,KAAP,uBAAiCC,KAAKC,SAAL,CAAe,mBAASC,MAAxB,CAAjC;AACA,WAAO,mBAASA,MAAhB;AACD,GALY;;AAOb;AACAC,kBAAgB,wBAACC,IAAD,EAA2C;AAAA,QAApCC,QAAoC,uEAAzB,IAAyB;AAAA,QAAnBC,OAAmB,uEAAT,IAAS;;AACzD,+BAAOR,MAAP,GAAgB,uBAAhB;AACA,QAAIS,qBAAJ;AACA,QAAIC,MAAMC,QAAQD,GAAlB;;AAEA,QAAIH,QAAJ,EAAc;AACZE,gBAAUF,QAAV;AACD;;AAED,QAAIC,OAAJ,EAAa;AACXE,YAAMF,OAAN;AACD;;AAED;AACA,uBAASJ,MAAT,CAAgBQ,GAAhB,GAAsBF,IAAIG,uBAA1B;AACA,uBAAST,MAAT,CAAgBU,IAAhB,GAAuBJ,IAAIK,iBAA3B;AACA;AACA,uBAASX,MAAT,CAAgBY,eAAhB,GAAkCP,QAAQQ,YAA1C;AACA,uBAASb,MAAT,CAAgBc,UAAhB,GAA6B,CAAC,CAACT,QAAQU,gBAAvC;AACA,uBAASf,MAAT,CAAgBgB,QAAhB,GAA2B,CAAC,CAACX,QAAQY,mBAArC;AACA,uBAASjB,MAAT,CAAgBkB,UAAhB,GAA6B,CAAC,CAACb,QAAQc,cAAvC;AACA,uBAASnB,MAAT,CAAgBoB,GAAhB,GAAsBf,QAAQgB,MAA9B;;AAEA,QAAMC,oBAAoB;AACxBd,WAAK;AACHe,kBAAU,IADP;AAEHC,gBAAQ;AAFL,OADmB;AAKxBd,YAAM;AACJa,kBAAU,IADN;AAEJC,gBAAQ;AAFJ;AALkB,KAA1B;;AAWA;AACA,QAAInB,QAAQoB,UAAR,IACCpB,QAAQqB,WADT,IAECxB,KAAKyB,SAFV,EAEqB;AACnB,UAAIC,QAAQ,IAAZ;;AAEA,uBAAEC,OAAF,CAAUP,iBAAV,EAA6B,UAACQ,CAAD,EAAIC,CAAJ,EAAU;AACrC,YAAI,CAAC,mBAAS/B,MAAT,CAAgB+B,CAAhB,CAAL,EAAyB;AACvB,cAAID,EAAEP,QAAN,EAAgB;AACd,uCAAOS,GAAP,CAAW,+CAA6CD,CAA7C,8DACgCD,EAAEN,MADlC,kBAAX;AAEAI,oBAAQ,KAAR;AACD;AACF;AACF,OARD;;AAUA,UAAI,CAACA,KAAL,EAAY;AACV,cAAM,IAAIK,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,UAAI5B,QAAQU,gBAAR,IAA4BV,QAAQQ,YAAxC,EAAsD;AACpD,cAAM,IAAIoB,KAAJ,CAAU,uDACd,wCADI,CAAN;AAED;;AAED;AACA,UAAI,CAAC,mBAASjC,MAAT,CAAgBY,eAAjB,IAAoC,mBAASZ,MAAT,CAAgBc,UAAxD,EAAoE;AAClE;AACA,2BAASd,MAAT,CAAgBY,eAAhB,GAAkC,qBAAlC;AACD;;AAED,iCAAOf,KAAP,CAAa,2CAAb;AACA,iCAAOA,KAAP,CAAaC,KAAKC,SAAL,CAAe,mBAASC,MAAxB,CAAb;;AAEA,iCAAOkC,GAAP,CAAW,+CAAX;AAED;;AAED,WAAO,mBAASlC,MAAhB;AACD;AAjFY,C","file":"configuration.js","sourcesContent":["import { argv } from \"yargs\";\nimport _ from \"lodash\";\nimport logger from \"testarmada-logger\";\nimport settings from \"./settings\";\nimport guid from \"./util/guid\";\n\nexport default {\n  getConfig: () => {\n    logger.prefix = \"Browserstack Executor\";\n    logger.debug(`executor config: ${JSON.stringify(settings.config)}`);\n    return settings.config;\n  },\n\n  /*eslint-disable complexity*/\n  validateConfig: (opts, argvMock = null, envMock = null) => {\n    logger.prefix = \"Browserstack Executor\";\n    let runArgv = argv;\n    let env = process.env;\n\n    if (argvMock) {\n      runArgv = argvMock;\n    }\n\n    if (envMock) {\n      env = envMock;\n    }\n\n    // required:\n    settings.config.key = env.BROWSERSTACK_ACCESS_KEY;\n    settings.config.user = env.BROWSERSTACK_USER;\n    // optional:\n    settings.config.localIdentifier = runArgv.bs_tunnel_id;\n    settings.config.useTunnels = !!runArgv.bs_create_tunnel;\n    settings.config.moreLogs = !!runArgv.bs_enable_more_logs;\n    settings.config.realDevice = !!runArgv.bs_real_device;\n    settings.config.app = runArgv.bs_app;\n\n    const parameterWarnings = {\n      key: {\n        required: true,\n        envKey: \"BROWSERSTACK_ACCESS_KEY\"\n      },\n      user: {\n        required: true,\n        envKey: \"BROWSERSTACK_USER\"\n      }\n    };\n\n    // Validate configuration if we have --sauce\n    if (runArgv.bs_browser\n      || runArgv.bs_browsers\n      || opts.isEnabled) {\n      let valid = true;\n\n      _.forEach(parameterWarnings, (v, k) => {\n        if (!settings.config[k]) {\n          if (v.required) {\n            logger.err(`Error! Browserstack local tunnel requires ${k} to be set. `\n              + ` Check if the environment variable $${v.envKey} is defined.`);\n            valid = false;\n          }\n        }\n      });\n\n      if (!valid) {\n        throw new Error(\"Missing configuration for Browserstack local tunnel.\");\n      }\n\n      if (runArgv.bs_create_tunnel && runArgv.bs_tunnel_id) {\n        throw new Error(\"Only one Browserstack local tunnel arg is allowed \" +\n          \", --bs_tunnel_idor --bs_create_tunnel.\");\n      }\n\n      // after verification we want to add sauce_tunnel_id if it's null till now\n      if (!settings.config.localIdentifier && settings.config.useTunnels) {\n        // auto generate tunnel id\n        settings.config.localIdentifier = guid();\n      }\n\n      logger.debug(\"Browserstack local tunnel configuration: \");\n      logger.debug(JSON.stringify(settings.config));\n\n      logger.log(\"Browserstack local tunnel configuration is OK\");\n\n    }\n\n    return settings.config;\n  }\n};\n"]}