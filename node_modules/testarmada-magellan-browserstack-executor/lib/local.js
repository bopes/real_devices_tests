"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _browserstackLocal = require("browserstack-local");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _settings = require("./settings");

var _settings2 = _interopRequireDefault(_settings);

var _testarmadaLogger = require("testarmada-logger");

var _testarmadaLogger2 = _interopRequireDefault(_testarmadaLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Local = function () {
  function Local(options) {
    var BrowserstackMock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Local);

    this.options = _lodash2.default.assign({}, options);
    this.browserstack = new _browserstackLocal.Local();

    if (BrowserstackMock) {
      this.browserstack = BrowserstackMock;
    }
  }

  _createClass(Local, [{
    key: "initialize",
    value: function initialize() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (!_this.options.key) {
          return reject("Browserstack local tunnel support is " + "missing configuration: Browserstack key.");
        }

        if (!_this.options.user) {
          return reject("Browserstack local tunnel support is " + "missing configuration: Browserstack user.");
        }

        return resolve();
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;

      _testarmadaLogger2.default.prefix = "Browserstack Executor";
      var localIdentifier = this.options.localIdentifier;
      var localKey = this.options.key;
      var connectFailures = 0;

      _testarmadaLogger2.default.log("Opening browserstack local connect [" + localIdentifier + "]");

      var connect = function connect() {
        return new Promise(function (resolve, reject) {
          var logFilePath = _path2.default.resolve(_settings2.default.tempDir) + "/build-" + localIdentifier + "_browserstacklocal.log";
          var localOptions = {
            key: localKey,
            localIdentifier: localIdentifier,

            verbose: _settings2.default.debug,
            logFile: logFilePath,
            forceLocal: true
          };

          _testarmadaLogger2.default.debug("calling browserstack local.start() w/ " + JSON.stringify(localOptions));

          _this2.browserstack.start(localOptions, function (err) {
            if (err) {
              _testarmadaLogger2.default.debug("Error from browserstack local.start():");
              _testarmadaLogger2.default.debug(err.message);

              if (_settings2.default.BAILED) {
                connectFailures++;

                return reject(new Error("Bailed due to maximum number of " + "browsetstack connect retries."));
              } else {
                connectFailures++;

                if (connectFailures >= _settings2.default.MAX_CONNECT_RETRIES) {
                  _settings2.default.BAILED = true;
                  return reject(new Error("Failed to create a secure browserstack local " + ("connect after " + connectFailures + " attempts.")));
                } else {
                  // Otherwise, keep retrying, and hope this is merely a blip and not an outage.
                  _testarmadaLogger2.default.err(">>> Browserstack Local Connect Failed!  Retrying " + connectFailures + (" of " + _settings2.default.MAX_CONNECT_RETRIES + " attempts..."));

                  return connect().then(resolve).catch(reject);
                }
              }
            } else {
              return resolve();
            }
          });
        });
      };

      return connect();
    }
  }, {
    key: "close",
    value: function close() {
      var _this3 = this;

      _testarmadaLogger2.default.prefix = "Browserstack Executor";
      return new Promise(function (resolve) {
        _testarmadaLogger2.default.log("Closing browserstack local connect [" + _this3.options.localIdentifier + "]");
        _this3.browserstack.stop(function () {
          resolve();
        });
      });
    }
  }]);

  return Local;
}();

exports.default = Local;
//# sourceMappingURL=local.js.map