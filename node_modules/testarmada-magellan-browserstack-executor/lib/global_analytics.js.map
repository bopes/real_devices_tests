{"version":3,"sources":["../src/global_analytics.js"],"names":["timeline","_emitter","push","eventName","metadata","startMarkerName","ev","type","data","name","markers","t","Date","now","emit","mark","markerName","sync","cloneDeep","getEmitter"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA,WAAW,EAAjB;AACA,IAAMC,WAAW,0BAAjB;;AAEA;kBACe;AACb;AACA;AACA;AACA;AACA;AACAC,QAAM,cAACC,SAAD,EAAYC,QAAZ,EAAsBC,eAAtB,EAA0C;AAC9CA,sBAAkBA,kBAAkBA,eAAlB,GAAoC,OAAtD;;AAEA,QAAMC,KAAK;AACTC,YAAM,iBADG;AAETC,YAAM;AACJC,cAAMN,SADF;;AAGJO,iBAAS,CAAC;AACRD,gBAAMJ,eADE;AAERM,aAAGC,KAAKC,GAAL;AAFK,SAAD,CAHL;;AAQJT;AARI;AAFG,KAAX;;AAcAH,aAASa,IAAT,CAAc,SAAd,EAAyBR,EAAzB;AACAN,aAASE,IAAT,CAAcI,EAAd;AACD,GAzBY;;AA2Bb;AACA;AACAS,QAAM,cAACZ,SAAD,EAAYa,UAAZ,EAA2B;AAC/BA,iBAAaA,aAAaA,UAAb,GAA0B,KAAvC;;AAEA,QAAMV,KAAK;AACTC,YAAM,sBADG;AAETJ,0BAFS;AAGTK,YAAM;AACJC,cAAMO,UADF;AAEJL,WAAGC,KAAKC,GAAL;AAFC;AAHG,KAAX;;AASAZ,aAASa,IAAT,CAAc,SAAd,EAAyBR,EAAzB;AACAN,aAASE,IAAT,CAAcI,EAAd;AACD,GA3CY;;AA6Cb;AACA;AACA;AACAW,QAAM,gBAAM;AACV,WAAO,iBAAEC,SAAF,CAAYlB,QAAZ,CAAP;AACD,GAlDY;;AAoDbmB,cAAY,sBAAM;AAChB,WAAOlB,QAAP;AACD;AAtDY,C","file":"global_analytics.js","sourcesContent":["import _ from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nconst timeline = [];\nconst _emitter = new EventEmitter();\n\n/* istanbul ignore next */\nexport default {\n  // Push a global (i.e. not testrun related) analytics event to the timeline.\n  // This will cause any reporters that listen to global analytics events to\n  // receive the event. A markers list will be started with the current time.\n  //\n  // NOTE: name must be unique if non-colliding markers are desired.\n  push: (eventName, metadata, startMarkerName) => {\n    startMarkerName = startMarkerName ? startMarkerName : \"start\";\n\n    const ev = {\n      type: \"analytics-event\",\n      data: {\n        name: eventName,\n\n        markers: [{\n          name: startMarkerName,\n          t: Date.now()\n        }],\n\n        metadata\n      }\n    };\n\n    _emitter.emit(\"message\", ev);\n    timeline.push(ev);\n  },\n\n  // Mark an event's timeline with a marker named markerName at current time.\n  // Default to a marker name of \"end\" if one isn't supplied.\n  mark: (eventName, markerName) => {\n    markerName = markerName ? markerName : \"end\";\n\n    const ev = {\n      type: \"analytics-event-mark\",\n      eventName,\n      data: {\n        name: markerName,\n        t: Date.now()\n      }\n    };\n\n    _emitter.emit(\"message\", ev);\n    timeline.push(ev);\n  },\n\n  // Return a copy of the existing timeline so that late-arriving reporters\n  // can synchronize to global analytics messages that emitted before they\n  // were initialized.\n  sync: () => {\n    return _.cloneDeep(timeline);\n  },\n\n  getEmitter: () => {\n    return _emitter;\n  }\n};\n"]}