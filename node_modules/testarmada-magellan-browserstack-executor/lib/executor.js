"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _child_process = require("child_process");

var _testarmadaLogger = require("testarmada-logger");

var _testarmadaLogger2 = _interopRequireDefault(_testarmadaLogger);

var _local = require("./local");

var _local2 = _interopRequireDefault(_local);

var _settings = require("./settings");

var _settings2 = _interopRequireDefault(_settings);

var _global_analytics = require("./global_analytics");

var _global_analytics2 = _interopRequireDefault(_global_analytics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var config = _settings2.default.config;

var tunnel = null;

exports.default = {
  setupRunner: function setupRunner() {
    var mocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    var ITunnel = _local2.default;

    if (mocks) {
      if (mocks.Tunnel) {
        ITunnel = mocks.Tunnel;
      }
      if (mocks.config) {
        config = mocks.config;
      }
    }

    if (config.useTunnels) {
      // create new tunnel if needed
      tunnel = new ITunnel(config);

      return tunnel.initialize().then(function () {
        _global_analytics2.default.push("browserstack-open-tunnels");
        return tunnel.open();
      }).then(function () {
        _global_analytics2.default.mark("browserstack-open-tunnels");
        _testarmadaLogger2.default.log("Browserstack local tunnel is opened!  Continuing...");
        _testarmadaLogger2.default.log("Assigned local tunnel [" + config.localIdentifier + "] to all workers");
      }).catch(function (err) {
        _global_analytics2.default.mark("browserstack-open-tunnels", "failed");
        return new Promise(function (resolve, reject) {
          reject(err);
        });
      });
    } else {
      return new Promise(function (resolve) {
        if (config.localIdentifier) {
          var tunnelAnnouncement = config.localIdentifier;
          _testarmadaLogger2.default.log("Connected to browserstack local tunnel [" + tunnelAnnouncement + "]");
        } else {
          _testarmadaLogger2.default.log("Connected to browserstack local without tunnel");
        }
        return resolve();
      });
    }
  },

  teardownRunner: function teardownRunner() {
    var mocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    if (mocks && mocks.config) {
      config = mocks.config;
    }

    // close tunnel if needed
    if (tunnel && config.useTunnels) {
      return tunnel.close().then(function () {
        _testarmadaLogger2.default.log("Browserstack tunnel is closed!  Continueing...");
      });
    } else {
      return new Promise(function (resolve) {
        resolve();
      });
    }
  },

  setupTest: function setupTest(callback) {
    callback();
  },

  teardownTest: function teardownTest(info, callback) {
    callback();
  },

  execute: function execute(testRun, options) {
    var mocks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var ifork = _child_process.fork;

    if (mocks && mocks.fork) {
      ifork = mocks.fork;
    }

    return ifork(testRun.getCommand(), testRun.getArguments(), options);
  },

  summerizeTest: function summerizeTest(magellanBuildId, testResult, callback) {
    _testarmadaLogger2.default.prefix = "Browserstack Executor";

    if (!testResult.metadata) {
      _testarmadaLogger2.default.warn("No meta data is found." + " This is mainly caused by not using https://github.com/TestArmada/nightwatch-extra");
      return callback();
    }

    return callback();
  }
};
//# sourceMappingURL=executor.js.map