"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _yargs = require("yargs");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _testarmadaLogger = require("testarmada-logger");

var _testarmadaLogger2 = _interopRequireDefault(_testarmadaLogger);

var _settings = require("./settings");

var _settings2 = _interopRequireDefault(_settings);

var _guid = require("./util/guid");

var _guid2 = _interopRequireDefault(_guid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  getConfig: function getConfig() {
    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    _testarmadaLogger2.default.debug("executor config: " + JSON.stringify(_settings2.default.config));
    return _settings2.default.config;
  },

  /*eslint-disable complexity*/
  validateConfig: function validateConfig(opts) {
    var argvMock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var envMock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    var runArgv = _yargs.argv;
    var env = process.env;

    if (argvMock) {
      runArgv = argvMock;
    }

    if (envMock) {
      env = envMock;
    }

    // required:
    _settings2.default.config.key = env.BROWSERSTACK_ACCESS_KEY;
    _settings2.default.config.user = env.BROWSERSTACK_USER;
    // optional:
    _settings2.default.config.localIdentifier = runArgv.bs_tunnel_id;
    _settings2.default.config.useTunnels = !!runArgv.bs_create_tunnel;
    _settings2.default.config.moreLogs = !!runArgv.bs_enable_more_logs;
    _settings2.default.config.realDevice = !!runArgv.bs_real_device;
    _settings2.default.config.app = runArgv.bs_app;

    var parameterWarnings = {
      key: {
        required: true,
        envKey: "BROWSERSTACK_ACCESS_KEY"
      },
      user: {
        required: true,
        envKey: "BROWSERSTACK_USER"
      }
    };

    // Validate configuration if we have --sauce
    if (runArgv.bs_browser || runArgv.bs_browsers || opts.isEnabled) {
      var valid = true;

      _lodash2.default.forEach(parameterWarnings, function (v, k) {
        if (!_settings2.default.config[k]) {
          if (v.required) {
            _testarmadaLogger2.default.err("Error! Browserstack local tunnel requires " + k + " to be set. " + (" Check if the environment variable $" + v.envKey + " is defined."));
            valid = false;
          }
        }
      });

      if (!valid) {
        throw new Error("Missing configuration for Browserstack local tunnel.");
      }

      if (runArgv.bs_create_tunnel && runArgv.bs_tunnel_id) {
        throw new Error("Only one Browserstack local tunnel arg is allowed " + ", --bs_tunnel_idor --bs_create_tunnel.");
      }

      // after verification we want to add sauce_tunnel_id if it's null till now
      if (!_settings2.default.config.localIdentifier && _settings2.default.config.useTunnels) {
        // auto generate tunnel id
        _settings2.default.config.localIdentifier = (0, _guid2.default)();
      }

      _testarmadaLogger2.default.debug("Browserstack local tunnel configuration: ");
      _testarmadaLogger2.default.debug(JSON.stringify(_settings2.default.config));

      _testarmadaLogger2.default.log("Browserstack local tunnel configuration is OK");
    }

    return _settings2.default.config;
  }
};
//# sourceMappingURL=configuration.js.map