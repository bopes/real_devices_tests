"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _yargs = require("yargs");

var _testarmadaLogger = require("testarmada-logger");

var _testarmadaLogger2 = _interopRequireDefault(_testarmadaLogger);

var _pancake = require("./pancake");

var _pancake2 = _interopRequireDefault(_pancake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  getNightwatchConfig: function getNightwatchConfig(profile, browserstackSettings) {
    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    var capabilities = _lodash2.default.assign({}, profile.desiredCapabilities);

    capabilities["browserstack.user"] = browserstackSettings.user;
    capabilities["browserstack.key"] = browserstackSettings.key;

    if (browserstackSettings.useTunnels) {
      capabilities["browserstack.local"] = true;
      capabilities["browserstack.localIdentifier"] = browserstackSettings.localIdentifier;
    }

    if (browserstackSettings.moreLogs) {
      capabilities["browserstack.debug"] = true;
      capabilities["browserstack.networkLogs"] = true;
    }

    if (browserstackSettings.realDevice) {
      // hardcode for now
      capabilities.realMobile = true;
    }

    if (browserstackSettings.app) {
      capabilities.app = browserstackSettings.app;
    }

    var config = {
      desiredCapabilities: capabilities
    };

    _testarmadaLogger2.default.debug("executor config: " + JSON.stringify(config));
    return config;
  },

  getProfiles: function getProfiles(opts) {
    var argvMock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    var runArgv = _yargs.argv;

    if (argvMock) {
      runArgv = argvMock;
    }

    return _pancake2.default.initialize().then(function () {
      return new Promise(function (resolve) {
        if (runArgv.bs_browser) {
          var p = {
            desiredCapabilities: _pancake2.default.get(runArgv.bs_browser),
            executor: "browserstack",
            nightwatchEnv: "browserstack",
            id: runArgv.bs_browser
          };

          _testarmadaLogger2.default.debug("detected profile: " + JSON.stringify(p));

          resolve(p);
        } else if (runArgv.bs_browsers) {
          var tempBrowsers = runArgv.bs_browsers.split(",");
          var returnBrowsers = [];

          _lodash2.default.forEach(tempBrowsers, function (browser) {
            var b = browser.trim();
            var p = {
              desiredCapabilities: _pancake2.default.get(b),
              executor: "browserstack",
              nightwatchEnv: "browserstack",
              // id is for magellan reporter
              id: b
            };

            returnBrowsers.push(p);
          });

          _testarmadaLogger2.default.debug("detected profiles: " + JSON.stringify(returnBrowsers));

          resolve(returnBrowsers);
        } else {
          resolve();
        }
      });
    });
  },

  /*eslint-disable no-unused-vars*/
  getCapabilities: function getCapabilities(profile, opts) {
    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    // profile key mapping
    // browser => id
    // resolution => resolution
    // orientation => deviceOrientation

    var id = profile.browser;

    return _pancake2.default.initialize().then(function () {
      return new Promise(function (resolve, reject) {
        try {
          var desiredCapabilities = _pancake2.default.get(id);
          // add executor info back to capabilities

          if (profile.resolution) {
            desiredCapabilities.resolution = profile.resolution;
          }

          if (profile.orientation) {
            desiredCapabilities.deviceOrientation = profile.orientation;
          }
          var p = {
            desiredCapabilities: desiredCapabilities,
            executor: profile.executor,
            nightwatchEnv: profile.executor,
            id: id
          };

          // for appium test
          if (profile.appium) {
            p.desiredCapabilities = _lodash2.default.merge(p.desiredCapabilities, profile.appium);
          }

          resolve(p);
        } catch (e) {
          reject("Executor browserstack cannot resolve profile \n            " + JSON.stringify(profile));
        }
      });
    });
  },

  listBrowsers: function listBrowsers(opts, callback) {
    _testarmadaLogger2.default.prefix = "Browserstack Executor";
    _pancake2.default.initialize().then(function (browsers) {
      var table = _pancake2.default.cliList();
      _testarmadaLogger2.default.loghelp(table.toString());
      callback(null, browsers);
    }).catch(function (err) {
      _testarmadaLogger2.default.err("Couldn't fetch browserstack browsers. Error: " + err);
      _testarmadaLogger2.default.err(err.stack);
      callback(err);
    });
  }
};
//# sourceMappingURL=profile.js.map