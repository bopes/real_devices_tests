{"version":3,"sources":["../src/settings.js"],"names":["DEFAULT_MAX_TIMEOUT","JS_MAX_TIMEOUT_OFFSET","argv","alias","getConfig","configLocations","config","push","resolve","trim","triedConfs","nextConf","configPath","shift","data","readFileSync","e","length","err","forEach","confLocation","process","exit","log","nightwatchConfig","JSON","parse","init","env","NIGHTWATCH_ERROR_DICTIONARY","test_settings","default","errorDictionary","screenshotPath","screenshot_path","timeoutValue","max_timeout","jsTimeoutValue","syncModeBrowserList","globals","Array","isArray","WAIT_INTERVAL","JS_WAIT_INTERNAL","MOBILE_SEEN_MAX","SEEN_MAX","JS_SEEN_MAX","COMMAND_MAX_TIMEOUT","JS_MAX_TIMEOUT","isWorker","worker","verbose","sessionId","undefined"],"mappings":"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","file":"settings.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport yargs from \"yargs\";\nimport logger from \"./util/logger\";\nimport errorDictionary from \"./errorDictionary\";\n\nconst DEFAULT_MAX_TIMEOUT = 60000;\nconst JS_MAX_TIMEOUT_OFFSET = 5000;\n\n\nconst argv = yargs\n  .alias(\"c\", \"config\")\n  .alias(\"v\", \"verbose\")\n  .argv;\n\nconst getConfig = function () {\n  // Try a number of config locations, starting with an explicitly-overriden one, if it exists.\n  const configLocations = [];\n\n  // Configurable config location via arguments\n  if (argv.config) {\n    configLocations.push(path.resolve(argv.config.trim()));\n  }\n\n  // Classic config location / still used by some repos\n  configLocations.push(path.resolve(\"./nightwatch.json\"));\n\n  // The magellan boilerplate's default config location\n  configLocations.push(path.resolve(\"./conf/config.json\"));\n\n  // For unit test\n  configLocations.push(path.resolve(\"./tests/conf/nightwatch.json\"));\n\n  const triedConfs = [];\n\n  // Try a config location, if it fails, try another, and so on. If we run out of config locations\n  // to try, we exit with an error and indicate all the locations we tried\n  /*eslint consistent-return:0 */\n  const nextConf = function () {\n    const configPath = configLocations.shift();\n    triedConfs.push(configPath);\n\n    let data;\n    try {\n      data = fs.readFileSync(configPath, \"utf8\");\n    } catch (e) {\n      // Eat this exception because we handle the lack of data below\n    }\n\n    /* istanbul ignore if */\n    if (!data) {\n      if (configLocations.length === 0) {\n        logger.err(\"nightwatch-extra has exhausted its \"\n          + \"search for nightwatch configuration file.\");\n        logger.err(\"Tried configuration locations:\");\n        triedConfs.forEach((confLocation) => logger.err(`  ${confLocation}`));\n        /*eslint no-process-exit:0 */\n        process.exit(1);\n      } else {\n        return nextConf();\n      }\n    } else {\n      logger.log(`nightwatch-magellan has found nightwatch configuration at ${ configPath}`);\n      const nightwatchConfig = JSON.parse(data);\n      errorDictionary.init(process.env.NIGHTWATCH_ERROR_DICTIONARY || nightwatchConfig.test_settings.default.errorDictionary);\n      return {\n        nightwatchConfig\n      };\n    }\n  };\n\n  return nextConf();\n};\n\nconst config = getConfig();\n\n// Screenshot Output Control:\n// Usage: --screenshots=path/to/temp/screenshot/directory\n// This allows external test runners to set where screenshots from the\n// screenshot() command will write their files.\nconst screenshotPath = argv.screenshot_path ?\n  path.resolve(argv.screenshot_path) : path.resolve(\"./temp\");\n\n// Parameter for COMMAND_MAX_TIMEOUT\n// This allows a config file to set it's own timeout value, will default to 60000\nconst timeoutValue = config.nightwatchConfig.test_settings.default.max_timeout\n  || DEFAULT_MAX_TIMEOUT;\nconst jsTimeoutValue = timeoutValue - JS_MAX_TIMEOUT_OFFSET;\n\n// Switch for asynchronous js injection\n// This allows to run asynchronous js injection for a faster element\n// detection/operation in some browsers\nlet syncModeBrowserList = [\"iphone\", \"ipad\"];\nif (config.nightwatchConfig.test_settings.default.globals\n  && Array.isArray(config.nightwatchConfig.test_settings.default.globals.syncModeBrowserList)) {\n  // if browser in sync mode is defined in nightwatch.json\n  syncModeBrowserList = config.nightwatchConfig.test_settings.default.globals.syncModeBrowserList;\n}\n\nconst env = argv.env;\n\nexport default {\n  WAIT_INTERVAL: 100,\n  JS_WAIT_INTERNAL: 100,\n  MOBILE_SEEN_MAX: 1,\n  SEEN_MAX: 3,\n  JS_SEEN_MAX: 3,\n  COMMAND_MAX_TIMEOUT: timeoutValue,\n  JS_MAX_TIMEOUT: jsTimeoutValue,\n\n  // true if test is launched by a specific runner other than nightwatch, such as magellan\n  isWorker: !!argv.worker,\n  env,\n  verbose: argv.verbose,\n\n  sessionId: undefined,\n\n  nightwatchConfig: config.nightwatchConfig,\n\n  screenshotPath,\n  syncModeBrowserList\n};\n"]}