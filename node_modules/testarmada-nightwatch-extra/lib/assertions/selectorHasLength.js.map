{"version":3,"sources":["../../src/assertions/selectorHasLength.js"],"names":["SelectorHasLength","nightwatch","customizedSettings","call","cmd","inherits","prototype","assert","actual","expected","undefined","fail","message","failureDetails","pass","injectedJsCommand","$el","sizzle","command","selector","normalize","format","notVisibleFailureMessage","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAChF,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBF,UAAzB,EAAqCC,kBAArC;AACA,OAAKE,GAAL,GAAW,mBAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcL,iBAAd;;AAEAA,kBAAkBM,SAAlB,CAA4BC,MAA5B,GAAqC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC/D,MAAIA,aAAaC,SAAb,IAA0BF,WAAWC,QAAzC,EAAmD;AACjD,SAAKE,IAAL,CAAUH,MAAV,EAAkBC,QAAlB,EAA4B,KAAKG,OAAjC,EAA0C,KAAKC,cAA/C;AACD,GAFD,MAEO;AACL,SAAKC,IAAL,CAAUN,MAAV,EAAkBC,QAAlB,EAA4B,KAAKG,OAAjC;AACD;AACF,CAND;;AAQA;AACAZ,kBAAkBM,SAAlB,CAA4BS,iBAA5B,GAAgD,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACrE,SAAO,mBAAP;AACD,CAFD;;AAIAjB,kBAAkBM,SAAlB,CAA4BY,OAA5B,GAAsC,UAAUC,QAAV,EAAoBV,QAApB,EAA8B;AAClE,OAAKU,QAAL,GAAgB,mBAAaC,SAAb,CAAuBD,QAAvB,CAAhB;AACA,OAAKV,QAAL,GAAgBA,QAAhB;;AAEA,OAAKG,OAAL,GAAe,eAAKS,MAAL,CAAY,gEAAZ,EACb,KAAKF,QADQ,EACE,KAAKV,QADP,CAAf;AAEA,OAAKI,cAAL,GAAsB,sCAAsC,KAAKJ,QAA3C,GAAsD,IAA5E;AACA,OAAKa,wBAAL,GAAgC,eAAe,KAAKH,QAApB,GAA+B,0CAA/D;;AAGA,OAAKI,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAlBD;;AAoBAC,OAAOC,OAAP,GAAiB9B,iBAAjB","file":"selectorHasLength.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\n\nconst SelectorHasLength = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"selectorhaslength\";\n};\n\nutil.inherits(SelectorHasLength, BaseAssertion);\n\nSelectorHasLength.prototype.assert = function (actual, expected) {\n  if (expected === undefined || actual !== expected) {\n    this.fail(actual, expected, this.message, this.failureDetails);\n  } else {\n    this.pass(actual, expected, this.message);\n  }\n};\n\n/* eslint-disable */\nSelectorHasLength.prototype.injectedJsCommand = function ($el, sizzle) {\n  return \"return $el.length\";\n}\n\nSelectorHasLength.prototype.command = function (selector, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> has length <%s> after %d milliseconds\",\n    this.selector, this.expected);\n  this.failureDetails = \"actual result:[ %s ], expected:[ \" + this.expected + \" ]\";\n  this.notVisibleFailureMessage = \"Selector '\" + this.selector + \"' was not visible after %d milliseconds.\";\n\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = SelectorHasLength;"]}