{"version":3,"sources":["../../src/assertions/elNotContainsText.js"],"names":["ElNotContainsText","nightwatch","customizedSettings","call","cmd","inherits","prototype","assert","actual","expected","undefined","indexOf","RegExp","exec","pass","message","fail","failureDetails","injectedJsCommand","$el","sizzle","command","selector","normalize","format","notVisibleFailureMessage","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAChF,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBF,UAAzB,EAAqCC,kBAArC;AACA,OAAKE,GAAL,GAAW,mBAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcL,iBAAd;;AAEAA,kBAAkBM,SAAlB,CAA4BC,MAA5B,GAAqC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC/D,MAAIA,aAAaC,SAAb,IACCF,OAAOG,OAAP,CAAeF,QAAf,IAA2B,CAD5B,IAEC,CAAC,IAAIG,MAAJ,CAAWH,QAAX,EAAqBI,IAArB,CAA0BL,MAA1B,CAFN,EAEyC;AACvC,SAAKM,IAAL,CAAUN,MAAV,EAAkBC,QAAlB,EAA4B,KAAKM,OAAjC;AACD,GAJD,MAIO;AACL,SAAKC,IAAL,CAAUR,MAAV,EAAkBC,QAAlB,EAA4B,KAAKM,OAAjC,EAA0C,KAAKE,cAA/C;AACD;AACF,CARD;;AAUA;AACAjB,kBAAkBM,SAAlB,CAA4BY,iBAA5B,GAAgD,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACrE,SAAO,4BAAP;AACD,CAFD;;AAIApB,kBAAkBM,SAAlB,CAA4Be,OAA5B,GAAsC,UAAUC,QAAV,EAAoBb,QAApB,EAA8B;AAClE,OAAKa,QAAL,GAAgB,mBAAaC,SAAb,CAAuBD,QAAvB,CAAhB;AACA,OAAKb,QAAL,GAAgBA,QAAhB;;AAEA,OAAKM,OAAL,GAAe,eAAKS,MAAL,CAAY,6EAAZ,EACb,KAAKF,QADQ,EACE,KAAKb,QADP,CAAf;AAEA,OAAKQ,cAAL,yCAA2D,KAAKR,QAAhE;AACA,OAAKgB,wBAAL,kBAA8C,KAAKH,QAAnD;;AAEA,OAAKI,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAjBD;;AAmBAC,OAAOC,OAAP,GAAiBjC,iBAAjB","file":"elNotContainsText.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\n\nconst ElNotContainsText = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"elnotcontainstext\";\n};\n\nutil.inherits(ElNotContainsText, BaseAssertion);\n\nElNotContainsText.prototype.assert = function (actual, expected) {\n  if (expected !== undefined\n    && actual.indexOf(expected) < 0\n    && !new RegExp(expected).exec(actual)) {\n    this.pass(actual, expected, this.message);\n  } else {\n    this.fail(actual, expected, this.message, this.failureDetails);\n  }\n};\n\n/* eslint-disable */\nElNotContainsText.prototype.injectedJsCommand = function ($el, sizzle) {\n  return \"return sizzle.getText($el)\";\n};\n\nElNotContainsText.prototype.command = function (selector, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> does not contains text <%s> after %d milliseconds \",\n    this.selector, this.expected);\n  this.failureDetails = `actual result:[ %s ], expected:[ ${ this.expected } ]`;\n  this.notVisibleFailureMessage = `Selector '${ this.selector }' was not visible after %d milliseconds.`;\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElNotContainsText;\n"]}