{"version":3,"sources":["../../src/assertions/elValueContains.js"],"names":["ElValueContains","nightwatch","customizedSettings","call","cmd","inherits","prototype","assert","actual","expected","undefined","indexOf","RegExp","exec","fail","message","failureDetails","pass","injectedJsCommand","$el","sizzle","command","selector","normalize","format","notVisibleFailureMessage","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAC9E,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBF,UAAzB,EAAqCC,kBAArC;AACA,OAAKE,GAAL,GAAW,iBAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcL,eAAd;;AAEAA,gBAAgBM,SAAhB,CAA0BC,MAA1B,GAAmC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC7D,MAAIA,aAAaC,SAAb,IACC,CAACF,MADF,IAECA,OAAOG,OAAP,CAAeF,QAAf,IAA2B,CAA3B,IACE,CAAC,IAAIG,MAAJ,CAAWH,QAAX,EAAqBI,IAArB,CAA0BL,MAA1B,CAHR,EAG2C;AACzC,SAAKM,IAAL,CAAUN,MAAV,EAAkBC,QAAlB,EAA4B,KAAKM,OAAjC,EAA0C,KAAKC,cAA/C;AACD,GALD,MAKO;AACL,SAAKC,IAAL,CAAUT,MAAV,EAAkBC,QAAlB,EAA4B,KAAKM,OAAjC;AACD;AACF,CATD;;AAWA;AACAf,gBAAgBM,SAAhB,CAA0BY,iBAA1B,GAA8C,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACnE,SAAO,qBAAP;AACD,CAFD;;AAIApB,gBAAgBM,SAAhB,CAA0Be,OAA1B,GAAoC,UAAUC,QAAV,EAAoBb,QAApB,EAA8B;AAChE,OAAKa,QAAL,GAAgB,mBAAaC,SAAb,CAAuBD,QAAvB,CAAhB;AACA,OAAKb,QAAL,GAAgBA,QAAhB;;AAEA,OAAKM,OAAL,GAAe,eAAKS,MAAL,CAAY,gEAAZ,EACb,KAAKF,QADQ,EACE,KAAKb,QADP,CAAf;AAEA,OAAKO,cAAL,GAAsB,sCAAsC,KAAKP,QAA3C,GAAsD,IAA5E;AACA,OAAKgB,wBAAL,GAAgC,eAAe,KAAKH,QAApB,GAA+B,0CAA/D;;AAEA,OAAKI,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAjBD;;AAmBAC,OAAOC,OAAP,GAAiBjC,eAAjB","file":"elValueContains.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\n\nconst ElValueContains = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"elvaluecontains\";\n};\n\nutil.inherits(ElValueContains, BaseAssertion);\n\nElValueContains.prototype.assert = function (actual, expected) {\n  if (expected === undefined\n    || !actual\n    || actual.indexOf(expected) < 0\n      && !new RegExp(expected).exec(actual)) {\n    this.fail(actual, expected, this.message, this.failureDetails);\n  } else {\n    this.pass(actual, expected, this.message);\n  }\n};\n\n/* eslint-disable */\nElValueContains.prototype.injectedJsCommand = function ($el, sizzle) {\n  return \"return $el[0].value\";\n}\n\nElValueContains.prototype.command = function (selector, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> has value <%s> after %d milliseconds \",\n    this.selector, this.expected);\n  this.failureDetails = \"actual result:[ %s ], expected:[ \" + this.expected + \" ]\";\n  this.notVisibleFailureMessage = \"Selector '\" + this.selector + \"' was not visible after %d milliseconds.\";\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElValueContains;"]}