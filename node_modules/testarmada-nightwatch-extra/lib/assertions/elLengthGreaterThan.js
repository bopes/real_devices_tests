"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _selector = require("../util/selector");

var _selector2 = _interopRequireDefault(_selector);

var _baseAssertion = require("../base-assertion");

var _baseAssertion2 = _interopRequireDefault(_baseAssertion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ElLengthGreaterThan = function ElLengthGreaterThan() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var customizedSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _baseAssertion2.default.call(this, nightwatch, customizedSettings);
  this.cmd = "ellengthgreaterthan";
};

_util2.default.inherits(ElLengthGreaterThan, _baseAssertion2.default);

ElLengthGreaterThan.prototype.assert = function (actual, expected) {
  if (expected === undefined || actual <= expected) {
    this.fail(actual, expected, this.message, this.failureDetails);
  } else {
    this.pass(actual, expected, this.message);
  }
};

/* eslint-disable */
ElLengthGreaterThan.prototype.injectedJsCommand = function ($el, sizzle) {
  var ret = "";
  switch (this.selectUsing) {
    case "value":
      ret = "return $el[0].value.length;";
      break;
    case "text":
      ret = "return sizzle.getText($el).length;";
      break;
    case "html":
      ret = "return $el[0].innerHTML.length;";
      break;
    case "length":
      ret = "return $el.length;";
      break;
  }
  return ret;
};

ElLengthGreaterThan.prototype.command = function (selector, selectUsing, expected) {
  this.selector = _selector2.default.normalize(selector);
  this.selectUsing = selectUsing;
  this.expected = expected;

  this.message = _util2.default.format("Testing if selector <%s> length is greater than <%s> after %d milliseconds", this.selector, this.expected);
  this.failureDetails = "actual result:[ %s ], expected:[ " + this.expected + " ]";
  this.notVisibleFailureMessage = "Selector '" + this.selector + "' was not visible after %d milliseconds.";

  this.startTime = new Date().getTime();

  // Track how many times we've seen selector as :visible
  this.seenCount = 0;
  this.decide();
  this.checkConditions();

  return this;
};

module.exports = ElLengthGreaterThan;
//# sourceMappingURL=elLengthGreaterThan.js.map