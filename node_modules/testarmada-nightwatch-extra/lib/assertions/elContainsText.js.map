{"version":3,"sources":["../../src/assertions/elContainsText.js"],"names":["ElContainsText","nightwatch","customizedSettings","call","cmd","inherits","prototype","assert","actual","expected","pactual","replace","undefined","indexOf","RegExp","exec","fail","message","failureDetails","pass","injectedJsCommand","$el","sizzle","command","selector","normalize","format","notVisibleFailureMessage","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB,SAAjBA,cAAiB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAC7E,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBF,UAAzB,EAAqCC,kBAArC;AACA,OAAKE,GAAL,GAAW,gBAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcL,cAAd;;AAEAA,eAAeM,SAAf,CAAyBC,MAAzB,GAAkC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC5D,MAAMC,UAAUF,OAAOG,OAAP,CAAe,WAAf,EAA4B,GAA5B,CAAhB;;AAEA,MAAIF,aAAaG,SAAb,IAA0BF,QAAQG,OAAR,CAAgBJ,QAAhB,IAA4B,CAA5B,IACzB,CAAC,IAAIK,MAAJ,CAAWL,QAAX,EAAqBM,IAArB,CAA0BL,OAA1B,CADN,EAC0C;AACxC,SAAKM,IAAL,CAAUN,OAAV,EAAmBD,QAAnB,EAA6B,KAAKQ,OAAlC,EAA2C,KAAKC,cAAhD;AACD,GAHD,MAGO;AACL,SAAKC,IAAL,CAAUT,OAAV,EAAmBD,QAAnB,EAA6B,KAAKQ,OAAlC;AACD;AACF,CATD;;AAWA;AACAjB,eAAeM,SAAf,CAAyBc,iBAAzB,GAA6C,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAClE,SAAO,4BAAP;AACD,CAFD;;AAIAtB,eAAeM,SAAf,CAAyBiB,OAAzB,GAAmC,UAAUC,QAAV,EAAoBf,QAApB,EAA8B;AAC/D,OAAKe,QAAL,GAAgB,mBAAaC,SAAb,CAAuBD,QAAvB,CAAhB;AACA,OAAKf,QAAL,GAAgBA,QAAhB;;AAEA,OAAKQ,OAAL,GAAe,eAAKS,MAAL,CAAY,oEAAZ,EACb,KAAKF,QADQ,EACE,KAAKf,QADP,CAAf;AAEA,OAAKS,cAAL,GAAsB,sCAAsC,KAAKT,QAA3C,GAAsD,IAA5E;AACA,OAAKkB,wBAAL,GAAgC,eAAe,KAAKH,QAApB,GAC5B,0CADJ;;AAGA,OAAKI,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAlBD;;AAoBAC,OAAOC,OAAP,GAAiBnC,cAAjB","file":"elContainsText.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\n\nconst ElContainsText = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"elcontainstext\";\n};\n\nutil.inherits(ElContainsText, BaseAssertion);\n\nElContainsText.prototype.assert = function (actual, expected) {\n  const pactual = actual.replace(/[\\s|\\n]+/g, \" \");\n\n  if (expected === undefined || pactual.indexOf(expected) < 0\n    && !new RegExp(expected).exec(pactual)) {\n    this.fail(pactual, expected, this.message, this.failureDetails);\n  } else {\n    this.pass(pactual, expected, this.message);\n  }\n};\n\n/* eslint-disable */\nElContainsText.prototype.injectedJsCommand = function ($el, sizzle) {\n  return \"return sizzle.getText($el)\";\n};\n\nElContainsText.prototype.command = function (selector, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> contains text <%s> after %d milliseconds \",\n    this.selector, this.expected);\n  this.failureDetails = \"actual result:[ %s ], expected:[ \" + this.expected + \" ]\";\n  this.notVisibleFailureMessage = \"Selector '\" + this.selector\n    + \"' was not visible after %d milliseconds.\";\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElContainsText;\n"]}