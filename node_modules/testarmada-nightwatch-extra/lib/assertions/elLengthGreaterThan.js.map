{"version":3,"sources":["../../src/assertions/elLengthGreaterThan.js"],"names":["ElLengthGreaterThan","nightwatch","customizedSettings","call","cmd","inherits","prototype","assert","actual","expected","undefined","fail","message","failureDetails","pass","injectedJsCommand","$el","sizzle","ret","selectUsing","command","selector","normalize","format","notVisibleFailureMessage","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,sBAAsB,SAAtBA,mBAAsB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAClF,0BAAcC,IAAd,CAAmB,IAAnB,EAAyBF,UAAzB,EAAqCC,kBAArC;AACA,OAAKE,GAAL,GAAW,qBAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcL,mBAAd;;AAEAA,oBAAoBM,SAApB,CAA8BC,MAA9B,GAAuC,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AACjE,MAAIA,aAAaC,SAAb,IAA0BF,UAAUC,QAAxC,EAAkD;AAChD,SAAKE,IAAL,CAAUH,MAAV,EAAkBC,QAAlB,EAA4B,KAAKG,OAAjC,EAA0C,KAAKC,cAA/C;AACD,GAFD,MAEO;AACL,SAAKC,IAAL,CAAUN,MAAV,EAAkBC,QAAlB,EAA4B,KAAKG,OAAjC;AACD;AACF,CAND;;AAQA;AACAZ,oBAAoBM,SAApB,CAA8BS,iBAA9B,GAAkD,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACvE,MAAIC,MAAM,EAAV;AACA,UAAQ,KAAKC,WAAb;AACE,SAAK,OAAL;AACED,YAAM,6BAAN;AACA;AACF,SAAK,MAAL;AACEA,YAAM,oCAAN;AACA;AACF,SAAK,MAAL;AACEA,YAAM,iCAAN;AACA;AACF,SAAK,QAAL;AACEA,YAAM,oBAAN;AACA;AAZJ;AAcA,SAAOA,GAAP;AACD,CAjBD;;AAmBAlB,oBAAoBM,SAApB,CAA8Bc,OAA9B,GAAwC,UAAUC,QAAV,EAAoBF,WAApB,EAAiCV,QAAjC,EAA2C;AACjF,OAAKY,QAAL,GAAgB,mBAAaC,SAAb,CAAuBD,QAAvB,CAAhB;AACA,OAAKF,WAAL,GAAmBA,WAAnB;AACA,OAAKV,QAAL,GAAgBA,QAAhB;;AAEA,OAAKG,OAAL,GAAe,eAAKW,MAAL,CAAY,4EAAZ,EACb,KAAKF,QADQ,EACE,KAAKZ,QADP,CAAf;AAEA,OAAKI,cAAL,GAAsB,sCAAsC,KAAKJ,QAA3C,GAAsD,IAA5E;AACA,OAAKe,wBAAL,GAAgC,eAAe,KAAKH,QAApB,GAA+B,0CAA/D;;AAEA,OAAKI,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAlBD;;AAoBAC,OAAOC,OAAP,GAAiBhC,mBAAjB","file":"elLengthGreaterThan.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseAssertion from \"../base-assertion\";\n\nconst ElLengthGreaterThan = function (nightwatch = null, customizedSettings = null) {\n  BaseAssertion.call(this, nightwatch, customizedSettings);\n  this.cmd = \"ellengthgreaterthan\";\n};\n\nutil.inherits(ElLengthGreaterThan, BaseAssertion);\n\nElLengthGreaterThan.prototype.assert = function (actual, expected) {\n  if (expected === undefined || actual <= expected) {\n    this.fail(actual, expected, this.message, this.failureDetails);\n  } else {\n    this.pass(actual, expected, this.message);\n  }\n};\n\n/* eslint-disable */\nElLengthGreaterThan.prototype.injectedJsCommand = function ($el, sizzle) {\n  let ret = \"\";\n  switch (this.selectUsing) {\n    case \"value\":\n      ret = \"return $el[0].value.length;\";\n      break;\n    case \"text\":\n      ret = \"return sizzle.getText($el).length;\";\n      break;\n    case \"html\":\n      ret = \"return $el[0].innerHTML.length;\";\n      break;\n    case \"length\":\n      ret = \"return $el.length;\";\n      break;\n  }\n  return ret;\n}\n\nElLengthGreaterThan.prototype.command = function (selector, selectUsing, expected) {\n  this.selector = selectorUtil.normalize(selector);\n  this.selectUsing = selectUsing;\n  this.expected = expected;\n\n  this.message = util.format(\"Testing if selector <%s> length is greater than <%s> after %d milliseconds\",\n    this.selector, this.expected);\n  this.failureDetails = \"actual result:[ %s ], expected:[ \" + this.expected + \" ]\";\n  this.notVisibleFailureMessage = \"Selector '\" + this.selector + \"' was not visible after %d milliseconds.\";\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = ElLengthGreaterThan;\n"]}