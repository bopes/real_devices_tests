"use strict";

var _jimp = require("jimp");

var _jimp2 = _interopRequireDefault(_jimp);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _sanitizeFilename = require("sanitize-filename");

var _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);

var _selector = require("../util/selector");

var _selector2 = _interopRequireDefault(_selector);

var _settings = require("../settings");

var _settings2 = _interopRequireDefault(_settings);

var _getEl = require("./getEl");

var _getEl2 = _interopRequireDefault(_getEl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TakeElScreenshot = function TakeElScreenshot() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var customizedSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _getEl2.default.call(this, nightwatch, customizedSettings);
  this.cmd = "takeelscreenshot";
};

_util2.default.inherits(TakeElScreenshot, _getEl2.default);

/*eslint-disable max-nested-callbacks*/
TakeElScreenshot.prototype.do = function (magellanSel) {
  var self = this;
  var now = new Date().getTime();
  this.time.executeAsyncTime = now - self.startTime;

  var sel = "[" + this.selectorPrefix + "=" + magellanSel + "]";
  var filepath = _path2.default.resolve("" + (_settings2.default.screenshotPath + _path2.default.sep) + ((0, _sanitizeFilename2.default)(self.filename) + ".png"));

  this.client.api.getLocation(sel, function (location) {
    self.client.api.getElementSize(sel, function (size) {
      self.time.seleniumCallTime = new Date().getTime() - now;

      self.client.api.screenshot(false, function (result) {
        _jimp2.default.read(new Buffer(result.value, "base64"), function (err, image) {

          if (err) {
            self.fail();
          }

          image.crop(location.value.x, location.value.y, size.value.width, size.value.height).write(filepath, function () {
            return self.pass();
          });
        });
      });
    });
  });
};

/*eslint no-unused-vars:0 */
TakeElScreenshot.prototype.injectedJsCommand = function ($el) {
  return "return $el[0].getAttribute('data-magellan-temp-automation-id')";
};

TakeElScreenshot.prototype.command = function (selector, filename, cb) {
  this.selector = _selector2.default.normalize(selector);
  this.filename = filename;
  this.cb = cb;

  this.successMessage = "Screenshot for selector <" + this.selector + "> " + "is taken after %d milliseconds";
  this.failureMessage = "Failed to take screenshot for selector " + ("<" + this.selector + "> after %d milliseconds");

  this.startTime = new Date().getTime();

  // Track how many times we've seen selector as :visible
  this.seenCount = 0;
  this.decide();
  this.checkConditions();

  return this;
};

module.exports = TakeElScreenshot;
//# sourceMappingURL=takeElScreenshot.js.map