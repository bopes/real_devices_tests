"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _selector = require("../util/selector");

var _selector2 = _interopRequireDefault(_selector);

var _baseCommand = require("../base-command");

var _baseCommand2 = _interopRequireDefault(_baseCommand);

var _settings = require("../settings");

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_TIMEOUT = _settings2.default.COMMAND_MAX_TIMEOUT;
var WAIT_INTERVAL = _settings2.default.WAIT_INTERVAL;

var WautForElNotPresent = function WautForElNotPresent() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var customizedSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _baseCommand2.default.call(this, nightwatch, customizedSettings);
  this.cmd = "waitforelementnotpresent";
};

_util2.default.inherits(WautForElNotPresent, _baseCommand2.default);

WautForElNotPresent.prototype.do = function (value) {
  this.pass(value);
};

WautForElNotPresent.prototype.checkConditions = function () {
  var self = this;

  this.execute(this.executeSizzlejs, [this.selector, this.injectedJsCommand()], function (result) {
    var elapsed = new Date().getTime() - self.startTime;

    if (result.isVisibleStrict === false || elapsed > MAX_TIMEOUT) {

      if (result.isVisibleStrict === false) {
        var elapse = new Date().getTime();
        self.time.executeAsyncTime = elapse - self.startTime;
        self.time.seleniumCallTime = 0;
        self.do("not present");
      } else {
        self.fail("not present", "still present");
      }
    } else {
      setTimeout(self.checkConditions, WAIT_INTERVAL);
    }
  });
};

/*eslint no-unused-vars:0 */
WautForElNotPresent.prototype.injectedJsCommand = function ($el) {
  return "return $el.length";
};

WautForElNotPresent.prototype.command = function (selector, cb) {
  this.selector = _selector2.default.normalize(selector);
  this.cb = cb;

  this.successMessage = "Selector '" + this.selector + "' successfully disappeared" + " after %d milliseconds.";
  this.failureMessage = "Selector '" + this.selector + "' failed to disappear after %d milliseconds.";

  this.startTime = new Date().getTime();

  // Track how many times we've seen selector as :visible
  this.seenCount = 0;
  this.decide();
  this.checkConditions();

  return this;
};

module.exports = WautForElNotPresent;
//# sourceMappingURL=waitForElNotPresent.js.map