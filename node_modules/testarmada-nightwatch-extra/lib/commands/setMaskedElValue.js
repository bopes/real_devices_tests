"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _selector = require("../util/selector");

var _selector2 = _interopRequireDefault(_selector);

var _clickEl = require("./clickEl");

var _clickEl2 = _interopRequireDefault(_clickEl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KEYBOARD_DELAY = 150;
var DEFAULT_FIELDSIZE = 50;

var SetMaskedElValue = function SetMaskedElValue() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var customizedSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _clickEl2.default.call(this, nightwatch, customizedSettings);
  this.cmd = "setmaskedelvalue";
};

_util2.default.inherits(SetMaskedElValue, _clickEl2.default);

SetMaskedElValue.prototype.do = function (magellanSel) {
  var self = this;
  var client = self.client.api;

  // Send 50 <- keys first (NOTE: this assumes LTR text flow!)
  var backarrows = [];
  for (var i = 0; i < this.fieldSize; i++) {
    backarrows.push("\uE012");
  }

  var keys = backarrows.concat(self.valueToSet.split(""));

  var nextKey = function nextKey() {
    if (keys.length === 0) {
      client.pause(KEYBOARD_DELAY, function () {
        self.pass();
      });
    } else {
      var key = keys.shift();
      client.pause(KEYBOARD_DELAY).keys(key, function () {
        nextKey();
      });
    }
  };

  client.click("css selector", "[" + this.selectorPrefix + "='" + magellanSel + "']", function () {
    nextKey();
  });
};

/*eslint max-params:["error", 4] */
SetMaskedElValue.prototype.command = function (selector, valueToSet, /* optional */fieldSize, cb) {
  this.selector = _selector2.default.normalize(selector);
  this.valueToSet = valueToSet;

  if (typeof fieldSize === "number") {
    this.fieldSize = fieldSize;
    this.cb = cb;
  } else {
    this.fieldSize = DEFAULT_FIELDSIZE;
    this.cb = fieldSize;
  }

  this.successMessage = "Selector <" + this.selector + "> (masked) set value to " + ("[" + this.valueToSet + "] after %d milliseconds");
  this.failureMessage = "Selector <" + this.selector + "> (masked) could not set " + ("value to [" + this.valueToSet + "] after %d milliseconds");

  this.startTime = new Date().getTime();

  // Track how many times we've seen selector as :visible
  this.seenCount = 0;
  this.decide();
  this.checkConditions();

  return this;
};

module.exports = SetMaskedElValue;
//# sourceMappingURL=setMaskedElValue.js.map