{"version":3,"sources":["../../src/commands/getEls.js"],"names":["GetEls","nightwatch","customizedSettings","call","cmd","inherits","prototype","do","value","ret","i","push","pass","injectedJsCommand","$el","command","selector","cb","normalize","successMessage","failureMessage","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,SAATA,MAAS,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AACrE,wBAAYC,IAAZ,CAAiB,IAAjB,EAAuBF,UAAvB,EAAmCC,kBAAnC;AACA,OAAKE,GAAL,GAAW,QAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcL,MAAd;;AAEAA,OAAOM,SAAP,CAAiBC,EAAjB,GAAsB,UAAUC,KAAV,EAAiB;AACrC,MAAMC,MAAM,EAAZ;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAKF,KAArB,EAA4BE,GAA5B,EAAiC;AAC/BD,QAAIE,IAAJ,CAAS;AACP,iBAAWD;AADJ,KAAT;AAGD;AACD,OAAKE,IAAL,CAAUH,GAAV;AACD,CARD;;AAUA;AACAT,OAAOM,SAAP,CAAiBO,iBAAjB,GAAqC,UAAUC,GAAV,EAAe;AAClD,SAAO,mBAAP;AACD,CAFD;;AAIAd,OAAOM,SAAP,CAAiBS,OAAjB,GAA2B,UAAUC,QAAV,EAAoBC,EAApB,EAAwB;AACjD,OAAKD,QAAL,GAAgB,mBAAaE,SAAb,CAAuBF,QAAvB,CAAhB;AACA,OAAKC,EAAL,GAAUA,EAAV;;AAEA,OAAKE,cAAL,kBAAoC,KAAKH,QAAzC;AACA,OAAKI,cAAL,kBAAoC,KAAKJ,QAAzC;;AAEA,OAAKK,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CAfD;;AAiBAC,OAAOC,OAAP,GAAiB5B,MAAjB","file":"getEls.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport BaseCommand from \"../base-command\";\n\nconst GetEls = function (nightwatch = null, customizedSettings = null) {\n  BaseCommand.call(this, nightwatch, customizedSettings);\n  this.cmd = \"getels\";\n};\n\nutil.inherits(GetEls, BaseCommand);\n\nGetEls.prototype.do = function (value) {\n  const ret = [];\n  for (let i = 1; i <= value; i++) {\n    ret.push({\n      \"ELEMENT\": i\n    });\n  }\n  this.pass(ret);\n};\n\n/*eslint no-unused-vars:0 */\nGetEls.prototype.injectedJsCommand = function ($el) {\n  return \"return $el.length\";\n};\n\nGetEls.prototype.command = function (selector, cb) {\n  this.selector = selectorUtil.normalize(selector);\n  this.cb = cb;\n\n  this.successMessage = `Selector '${ this.selector }' was visible after %d milliseconds.`;\n  this.failureMessage = `Selector '${ this.selector }' was not visible after %d milliseconds.`;\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = GetEls;\n"]}