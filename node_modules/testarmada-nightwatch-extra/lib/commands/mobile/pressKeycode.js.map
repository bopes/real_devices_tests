{"version":3,"sources":["../../../src/commands/mobile/pressKeycode.js"],"names":["MAX_TIMEOUT","COMMAND_MAX_TIMEOUT","WAIT_INTERVAL","PressKeycode","nightwatch","call","cmd","inherits","prototype","do","value","pass","checkConditions","self","options","path","client","sessionId","method","data","keycode","protocol","result","status","seenCount","elapsed","Date","getTime","startTime","elapse","time","executeAsyncTime","seleniumCallTime","fail","setTimeout","command","cb","successMessage","failureMessage","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,mBAASC,mBAA7B;AACA,IAAMC,gBAAgB,mBAASA,aAA/B;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAAUC,UAAV,EAAsB;AACzC,8BAAYC,IAAZ,CAAiB,IAAjB,EAAuBD,UAAvB;AACA,OAAKE,GAAL,GAAW,cAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcJ,YAAd;;AAEAA,aAAaK,SAAb,CAAuBC,EAAvB,GAA4B,UAAUC,KAAV,EAAiB;AAC3C,OAAKC,IAAL,CAAUD,KAAV;AACD,CAFD;;AAIAP,aAAaK,SAAb,CAAuBI,eAAvB,GAAyC,YAAY;AACnD,MAAMC,OAAO,IAAb;;AAEA,MAAMC,UAAU;AACdC,wBAAkB,KAAKC,MAAL,CAAYC,SAA9B,iCADc;AAEdC,YAAQ,MAFM;AAGdC,UAAM;AACJC,eAAS,KAAKA;AADV;AAHQ,GAAhB;;AAQAP,OAAKQ,QAAL,CAAcP,OAAd,EAAuB,UAACQ,MAAD,EAAY;AACjC,QAAIA,OAAOC,MAAP,KAAkB,CAAtB,EAAyB;AACvB;AACAV,WAAKW,SAAL,IAAkB,CAAlB;AACD;;AAED,QAAMC,UAAW,IAAIC,IAAJ,EAAD,CAAaC,OAAb,KAAyBd,KAAKe,SAA9C;AACA,QAAIf,KAAKW,SAAL,IAAkB,CAAlB,IAAuBC,UAAUzB,WAArC,EAAkD;AAChD,UAAIa,KAAKW,SAAL,IAAkB,CAAtB,EAAyB;AACvB,YAAMK,SAAU,IAAIH,IAAJ,EAAD,CAAaC,OAAb,EAAf;AACAd,aAAKiB,IAAL,CAAUC,gBAAV,GAA6BF,SAAShB,KAAKe,SAA3C;AACAf,aAAKiB,IAAL,CAAUE,gBAAV,GAA6B,CAA7B;AACAnB,aAAKJ,EAAL,CAAQa,OAAOZ,KAAf;AACD,OALD,MAKO;AACLG,aAAKoB,IAAL;AACD;AACF,KATD,MASO;AACLC,iBAAWrB,KAAKD,eAAhB,EAAiCV,aAAjC;AACD;AACF,GAnBD;AAoBD,CA/BD;;AAiCAC,aAAaK,SAAb,CAAuB2B,OAAvB,GAAiC,UAAUf,OAAV,EAAmBgB,EAAnB,EAAuB;AACtD,OAAKhB,OAAL,GAAeA,OAAf;AACA,OAAKgB,EAAL,GAAUA,EAAV;;AAEA,OAAKC,cAAL,iBAAkC,KAAKjB,OAAvC;AACA,OAAKkB,cAAL,GAAsB,gEAAtB;;AAEA,OAAKV,SAAL,GAAkB,IAAIF,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKH,SAAL,GAAiB,CAAjB;AACA,OAAKZ,eAAL;;AAEA,SAAO,IAAP;AACD,CAdD;;AAgBA2B,OAAOC,OAAP,GAAiBrC,YAAjB","file":"pressKeycode.js","sourcesContent":["import util from \"util\";\nimport BaseCommand from \"../../base-mobile-command\";\nimport settings from \"../../settings\";\n\nconst MAX_TIMEOUT = settings.COMMAND_MAX_TIMEOUT;\nconst WAIT_INTERVAL = settings.WAIT_INTERVAL;\n\nconst PressKeycode = function (nightwatch) {\n  BaseCommand.call(this, nightwatch);\n  this.cmd = \"presskeycode\";\n};\n\nutil.inherits(PressKeycode, BaseCommand);\n\nPressKeycode.prototype.do = function (value) {\n  this.pass(value);\n};\n\nPressKeycode.prototype.checkConditions = function () {\n  const self = this;\n\n  const options = {\n    path: `/session/${this.client.sessionId}/appium/device/press_keycode`,\n    method: \"POST\",\n    data: {\n      keycode: this.keycode\n    }\n  };\n\n  self.protocol(options, (result) => {\n    if (result.status === 0) {\n      // sucessful\n      self.seenCount += 1;\n    }\n\n    const elapsed = (new Date()).getTime() - self.startTime;\n    if (self.seenCount >= 1 || elapsed > MAX_TIMEOUT) {\n      if (self.seenCount >= 1) {\n        const elapse = (new Date()).getTime();\n        self.time.executeAsyncTime = elapse - self.startTime;\n        self.time.seleniumCallTime = 0;\n        self.do(result.value);\n      } else {\n        self.fail();\n      }\n    } else {\n      setTimeout(self.checkConditions, WAIT_INTERVAL);\n    }\n  });\n};\n\nPressKeycode.prototype.command = function (keycode, cb) {\n  this.keycode = keycode;\n  this.cb = cb;\n\n  this.successMessage = `Keyboard ${this.keycode} was pressed after %d milliseconds.`;\n  this.failureMessage = \"Keyboard ${this.keycode} wasn't pressed after %d milliseconds.\";\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times selector is successfully checked by /element protocol\n  this.seenCount = 0;\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = PressKeycode;\n"]}