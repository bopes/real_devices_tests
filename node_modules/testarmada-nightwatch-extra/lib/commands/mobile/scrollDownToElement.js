"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _baseMobileCommand = require("../../base-mobile-command");

var _baseMobileCommand2 = _interopRequireDefault(_baseMobileCommand);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_ATTEMPTS = 10;
var distance = 200;

var ScrollDownToElement = function ScrollDownToElement() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  _baseMobileCommand2.default.call(this, nightwatch);
  this.cmd = "scrolldowntoelement";
};

_util2.default.inherits(ScrollDownToElement, _baseMobileCommand2.default);

ScrollDownToElement.prototype.command = function (xStart, yStart, elementLocateStrategy, elementSelector, cb) {
  var self = this;
  this.selector = elementSelector;
  this.using = elementLocateStrategy;
  this.cb = cb;

  var scrollToFindElement = function scrollToFindElement(attempts) {
    if (attempts < MAX_ATTEMPTS) {
      self.client.api.getMobileElConditional(elementLocateStrategy, elementSelector, 1000, function (result) {
        if (!result) {
          var yEnd = yStart > distance ? yStart - distance : 1;
          var xEnd = xStart;
          if (_lodash2.default.toLower(self.client.api.capabilities.platformName) === 'android') {} else if (_lodash2.default.toLower(self.client.api.capabilities.platformName) === 'ios') {
            yEnd = -Math.abs(distance);
            xEnd = 0;
          } else {
            self.failWithMessage("Invalid platform " + self.client.api.capabilities.platformName + ", expected ios or android");
          }

          self.client.api.swipeScreenTo(xStart, yStart, xEnd, yEnd, function () {
            scrollToFindElement(attempts + 1);
          });
        } else {
          self.passWithMessage("Selector '" + self.using + ":" + self.selector + "' " + "was visible after scrolling");
        }
      });
    } else {
      self.failWithMessage("Selector '" + self.using + ":" + self.selector + "' " + ("was not visible after scrolling " + MAX_ATTEMPTS + " times"));
    }
  };

  scrollToFindElement(0);
};

ScrollDownToElement.prototype.passWithMessage = function (passMessage) {
  var pactual = "visible";
  var pexpected = pactual;

  this.client.assertion(true, pactual, pexpected, _util2.default.format(passMessage), true);

  if (this.cb) {
    this.cb.apply(this.client.api, []);
  }
  this.emit("complete");
};

ScrollDownToElement.prototype.failWithMessage = function (failMessage) {
  var pactual = "not visible";
  var pexpected = "visible";

  this.client.assertion(false, pactual, pexpected, _util2.default.format(failMessage), true);

  if (this.cb) {
    this.cb.apply(this.client.api, []);
  }
  this.emit("complete");
};

module.exports = ScrollDownToElement;
//# sourceMappingURL=scrollDownToElement.js.map