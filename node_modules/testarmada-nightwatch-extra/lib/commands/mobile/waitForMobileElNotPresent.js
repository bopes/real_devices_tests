"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _baseMobileCommand = require("../../base-mobile-command");

var _baseMobileCommand2 = _interopRequireDefault(_baseMobileCommand);

var _settings = require("../../settings");

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_TIMEOUT = _settings2.default.COMMAND_MAX_TIMEOUT;
var WAIT_INTERVAL = _settings2.default.WAIT_INTERVAL;
var SEEN_MAX = _settings2.default.SEEN_MAX;

var WaitForMobileElNotPresent = function WaitForMobileElNotPresent() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  _baseMobileCommand2.default.call(this, nightwatch);
  this.cmd = "waitformobileelnotpresent";
};

_util2.default.inherits(WaitForMobileElNotPresent, _baseMobileCommand2.default);

WaitForMobileElNotPresent.prototype.do = function () {};

WaitForMobileElNotPresent.prototype.checkConditions = function () {
  var self = this;

  var options = {
    path: "/session/" + this.client.sessionId + "/element",
    method: "POST",
    data: {
      using: this.using,
      value: this.selector
    }
  };

  self.protocol(options, function (result) {
    /*eslint-disable no-magic-numbers*/
    if (result.status === -1 && result.errorStatus === 7) {
      // element isn't found
      self.seenCount += 1;
    }

    var elapsed = new Date().getTime() - self.startTime;

    if (self.seenCount >= SEEN_MAX || elapsed > MAX_TIMEOUT) {
      if (self.seenCount >= SEEN_MAX) {
        var elapse = new Date().getTime();
        self.time.executeAsyncTime = elapse - self.startTime;
        self.time.seleniumCallTime = 0;

        self.pass("not visible", "not visible");
      } else {
        self.fail("visible", "not visible");
      }
    } else {
      setTimeout(self.checkConditions, WAIT_INTERVAL);
    }
  });
};

/*eslint max-params:["error", 4] */
WaitForMobileElNotPresent.prototype.command = function (using, selector) {
  this.selector = selector;
  this.using = using;

  this.successMessage = _util2.default.format("Selector <%s:%s> successfully disappeared " + "after %d milliseconds ", this.using, this.selector);
  this.failureMessage = _util2.default.format("Selector <%s:%s> failed to disappear " + "after %d milliseconds ", this.using, this.selector);

  this.startTime = new Date().getTime();

  // Track how many times we've seen selector as :visible
  this.seenCount = 0;
  this.checkConditions();

  return this;
};

module.exports = WaitForMobileElNotPresent;
//# sourceMappingURL=waitForMobileElNotPresent.js.map