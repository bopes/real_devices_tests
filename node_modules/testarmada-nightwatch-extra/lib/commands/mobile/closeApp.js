"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _baseMobileCommand = require("../../base-mobile-command");

var _baseMobileCommand2 = _interopRequireDefault(_baseMobileCommand);

var _settings = require("../../settings");

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_TIMEOUT = _settings2.default.COMMAND_MAX_TIMEOUT;
var WAIT_INTERVAL = _settings2.default.WAIT_INTERVAL;

var CloseApp = function CloseApp() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  _baseMobileCommand2.default.call(this, nightwatch);
  this.cmd = "closeapp";
};

_util2.default.inherits(CloseApp, _baseMobileCommand2.default);

CloseApp.prototype.do = function (value) {
  this.pass(value);
};

CloseApp.prototype.checkConditions = function () {
  var self = this;

  var options = {
    path: "/session/" + this.client.sessionId + "/appium/app/close",
    method: "POST",
    data: {}
  };

  self.protocol(options, function (result) {
    if (result.status === 0) {
      // sucessful
      self.seenCount += 1;
    }

    var elapsed = new Date().getTime() - self.startTime;
    if (self.seenCount >= 1 || elapsed > MAX_TIMEOUT) {
      if (self.seenCount >= 1) {
        var elapse = new Date().getTime();
        self.time.executeAsyncTime = elapse - self.startTime;
        self.time.seleniumCallTime = 0;
        self.do(result.value);
      } else {
        self.fail();
      }
    } else {
      setTimeout(self.checkConditions, WAIT_INTERVAL);
    }
  });
};

CloseApp.prototype.command = function (cb) {
  this.cb = cb;

  this.successMessage = "App was closed after %d milliseconds.";
  this.failureMessage = "App wasn't closed after %d milliseconds.";

  this.startTime = new Date().getTime();

  // Track how many times selector is successfully checked by /element protocol
  this.seenCount = 0;
  this.checkConditions();

  return this;
};

module.exports = CloseApp;
//# sourceMappingURL=closeApp.js.map