"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _baseMobileCommand = require("../../base-mobile-command");

var _baseMobileCommand2 = _interopRequireDefault(_baseMobileCommand);

var _settings = require("../../settings");

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WAIT_INTERVAL = _settings2.default.WAIT_INTERVAL;
var SEEN_MAX = 3;

var GetMobileElConditional = function GetMobileElConditional() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  _baseMobileCommand2.default.call(this, nightwatch);
  this.cmd = "getmobileelconditional";
};

_util2.default.inherits(GetMobileElConditional, _baseMobileCommand2.default);

GetMobileElConditional.prototype.do = function (value) {
  this.pass(value);
};

GetMobileElConditional.prototype.checkConditions = function () {
  var self = this;

  var options = {
    path: "/session/" + this.client.sessionId + "/element",
    method: "POST",
    data: {
      using: this.using,
      value: this.selector
    }
  };

  self.protocol(options, function (result) {
    if (result.status === 0) {
      // sucessful
      self.seenCount += 3;
    }

    var elapsed = new Date().getTime() - self.startTime;
    if (self.seenCount >= SEEN_MAX || elapsed > self.maxTimeout) {
      if (self.seenCount >= SEEN_MAX) {
        var elapse = new Date().getTime();
        self.time.executeAsyncTime = elapse - self.startTime;
        self.time.seleniumCallTime = 0;
        self.do(true);
      } else {
        self.do(false);
      }
    } else {
      setTimeout(self.checkConditions, WAIT_INTERVAL);
    }
  });
};
/*eslint max-params:["error", 5] */
GetMobileElConditional.prototype.command = function (using, selector, maxTimeout, cb) {
  this.selector = selector;
  this.using = using;
  this.maxTimeout = maxTimeout;
  this.cb = cb;

  this.successMessage = "Selector '" + this.using + ":" + this.selector + "' " + "was visible after %d milliseconds.";
  this.failureMessage = "Selector '" + this.using + ":" + this.selector + "' " + "was not visible after %d milliseconds.";

  this.startTime = new Date().getTime();

  // Track how many times selector is successfully checked by /element protocol
  this.seenCount = 0;
  this.checkConditions();

  return this;
};

GetMobileElConditional.prototype.pass = function (actual) {
  this.time.totalTime = new Date().getTime() - this.startTime;
  if (actual) {
    this.client.assertion(true, actual, actual, _util2.default.format(this.successMessage, this.time.totalTime), true);
  } else {
    this.client.assertion(true, actual, actual, _util2.default.format(this.failureMessage, this.time.totalTime), true);
  }

  if (this.cb) {
    this.cb.apply(this.client.api, [actual]);
  }
  this.emit("complete");
};

module.exports = GetMobileElConditional;
//# sourceMappingURL=getMobileElConditional.js.map