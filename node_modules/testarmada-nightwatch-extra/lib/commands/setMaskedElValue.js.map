{"version":3,"sources":["../../src/commands/setMaskedElValue.js"],"names":["KEYBOARD_DELAY","DEFAULT_FIELDSIZE","SetMaskedElValue","nightwatch","customizedSettings","call","cmd","inherits","prototype","do","magellanSel","self","client","api","backarrows","i","fieldSize","push","keys","concat","valueToSet","split","nextKey","length","pause","pass","key","shift","click","selectorPrefix","command","selector","cb","normalize","successMessage","failureMessage","startTime","Date","getTime","seenCount","decide","checkConditions","module","exports"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB,GAAvB;AACA,IAAMC,oBAAoB,EAA1B;;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB,GAAwD;AAAA,MAA9CC,UAA8C,uEAAjC,IAAiC;AAAA,MAA3BC,kBAA2B,uEAAN,IAAM;;AAC/E,oBAAQC,IAAR,CAAa,IAAb,EAAmBF,UAAnB,EAA+BC,kBAA/B;AACA,OAAKE,GAAL,GAAW,kBAAX;AACD,CAHD;;AAKA,eAAKC,QAAL,CAAcL,gBAAd;;AAEAA,iBAAiBM,SAAjB,CAA2BC,EAA3B,GAAgC,UAAUC,WAAV,EAAuB;AACrD,MAAMC,OAAO,IAAb;AACA,MAAMC,SAASD,KAAKC,MAAL,CAAYC,GAA3B;;AAEA;AACA,MAAMC,aAAa,EAAnB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKC,SAAzB,EAAoCD,GAApC,EAAyC;AACvCD,eAAWG,IAAX,CAAgB,QAAhB;AACD;;AAED,MAAMC,OAAOJ,WAAWK,MAAX,CAAkBR,KAAKS,UAAL,CAAgBC,KAAhB,CAAsB,EAAtB,CAAlB,CAAb;;AAEA,MAAMC,UAAU,SAAVA,OAAU,GAAY;AAC1B,QAAIJ,KAAKK,MAAL,KAAgB,CAApB,EAAuB;AACrBX,aACGY,KADH,CACSxB,cADT,EACyB,YAAM;AAC3BW,aAAKc,IAAL;AACD,OAHH;AAID,KALD,MAKO;AACL,UAAMC,MAAMR,KAAKS,KAAL,EAAZ;AACAf,aACGY,KADH,CACSxB,cADT,EAEGkB,IAFH,CAEQQ,GAFR,EAEa,YAAM;AACfJ;AACD,OAJH;AAKD;AACF,GAdD;;AAgBAV,SACGgB,KADH,CAEE,cAFF,QAGM,KAAKC,cAHX,UAG8BnB,WAH9B,SAIE,YAAM;AACJY;AACD,GANH;AAOD,CAnCD;;AAqCA;AACApB,iBAAiBM,SAAjB,CAA2BsB,OAA3B,GAAqC,UAAUC,QAAV,EAAoBX,UAApB,EAAgC,cAAeJ,SAA/C,EAA0DgB,EAA1D,EAA8D;AACjG,OAAKD,QAAL,GAAgB,mBAAaE,SAAb,CAAuBF,QAAvB,CAAhB;AACA,OAAKX,UAAL,GAAkBA,UAAlB;;AAEA,MAAI,OAAOJ,SAAP,KAAqB,QAAzB,EAAmC;AACjC,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKgB,EAAL,GAAUA,EAAV;AACD,GAHD,MAGO;AACL,SAAKhB,SAAL,GAAiBf,iBAAjB;AACA,SAAK+B,EAAL,GAAUhB,SAAV;AACD;;AAGD,OAAKkB,cAAL,GAAsB,eAAa,KAAKH,QAAlB,uCACd,KAAKX,UADS,6BAAtB;AAEA,OAAKe,cAAL,GAAsB,eAAa,KAAKJ,QAAlB,iDACL,KAAKX,UADA,6BAAtB;;AAGA,OAAKgB,SAAL,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAjB;;AAEA;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,MAAL;AACA,OAAKC,eAAL;;AAEA,SAAO,IAAP;AACD,CA1BD;;AA4BAC,OAAOC,OAAP,GAAiBzC,gBAAjB","file":"setMaskedElValue.js","sourcesContent":["import util from \"util\";\n\nimport selectorUtil from \"../util/selector\";\nimport ClickEl from \"./clickEl\";\n\nconst KEYBOARD_DELAY = 150;\nconst DEFAULT_FIELDSIZE = 50;\n\nconst SetMaskedElValue = function (nightwatch = null, customizedSettings = null) {\n  ClickEl.call(this, nightwatch, customizedSettings);\n  this.cmd = \"setmaskedelvalue\";\n};\n\nutil.inherits(SetMaskedElValue, ClickEl);\n\nSetMaskedElValue.prototype.do = function (magellanSel) {\n  const self = this;\n  const client = self.client.api;\n\n  // Send 50 <- keys first (NOTE: this assumes LTR text flow!)\n  const backarrows = [];\n  for (let i = 0; i < this.fieldSize; i++) {\n    backarrows.push(\"\\uE012\");\n  }\n\n  const keys = backarrows.concat(self.valueToSet.split(\"\"));\n\n  const nextKey = function () {\n    if (keys.length === 0) {\n      client\n        .pause(KEYBOARD_DELAY, () => {\n          self.pass();\n        });\n    } else {\n      const key = keys.shift();\n      client\n        .pause(KEYBOARD_DELAY)\n        .keys(key, () => {\n          nextKey();\n        });\n    }\n  };\n\n  client\n    .click(\n    \"css selector\",\n    `[${this.selectorPrefix}='${magellanSel}']`,\n    () => {\n      nextKey();\n    });\n};\n\n/*eslint max-params:[\"error\", 4] */\nSetMaskedElValue.prototype.command = function (selector, valueToSet, /* optional */ fieldSize, cb) {\n  this.selector = selectorUtil.normalize(selector);\n  this.valueToSet = valueToSet;\n\n  if (typeof fieldSize === \"number\") {\n    this.fieldSize = fieldSize;\n    this.cb = cb;\n  } else {\n    this.fieldSize = DEFAULT_FIELDSIZE;\n    this.cb = fieldSize;\n  }\n\n\n  this.successMessage = `Selector <${this.selector}> (masked) set value to `\n    + `[${this.valueToSet}] after %d milliseconds`;\n  this.failureMessage = `Selector <${this.selector}> (masked) could not set `\n    + `value to [${this.valueToSet}] after %d milliseconds`;\n\n  this.startTime = (new Date()).getTime();\n\n  // Track how many times we've seen selector as :visible\n  this.seenCount = 0;\n  this.decide();\n  this.checkConditions();\n\n  return this;\n};\n\nmodule.exports = SetMaskedElValue;\n"]}