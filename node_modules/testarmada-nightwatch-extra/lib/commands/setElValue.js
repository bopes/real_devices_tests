"use strict";

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _selector = require("../util/selector");

var _selector2 = _interopRequireDefault(_selector);

var _clickEl = require("./clickEl");

var _clickEl2 = _interopRequireDefault(_clickEl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SetElValue = function SetElValue() {
  var nightwatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var customizedSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _clickEl2.default.call(this, nightwatch, customizedSettings);
  this.cmd = "setelvalue";
};

_util2.default.inherits(SetElValue, _clickEl2.default);

SetElValue.prototype.do = function (magellanSel) {
  var self = this;
  var now = new Date().getTime();
  this.time.executeAsyncTime = now - self.startTime;
  this.client.api.setValue("css selector", "[" + this.selectorPrefix + "='" + magellanSel + "']", this.valueToSet, function () {
    self.time.seleniumCallTime = new Date().getTime() - now;
    self.pass();
  });
};

SetElValue.prototype.command = function (selector, valueToSet, cb) {
  this.selector = _selector2.default.normalize(selector);
  this.valueToSet = valueToSet;
  this.cb = cb;

  this.successMessage = "Selector <" + this.selector + "> set value to" + (" [" + this.valueToSet + "] after %d milliseconds");
  this.failureMessage = "Selector <" + this.selector + "> could not set" + (" value to [" + this.valueToSet + "] after %d milliseconds");

  this.startTime = new Date().getTime();

  // Track how many times we've seen selector as :visible
  this.seenCount = 0;
  this.decide();
  this.checkConditions();

  return this;
};

module.exports = SetElValue;
//# sourceMappingURL=setElValue.js.map