{"version":3,"sources":["../src/base-mobile-assertion.js"],"names":["MAX_TIMEOUT","COMMAND_MAX_TIMEOUT","WAIT_INTERVAL","SEEN_MAX","MOBILE_SEEN_MAX","Base","nightwatch","call","startTime","time","totalTime","seleniumCallTime","executeAsyncTime","selector","successMessage","failureMessage","checkConditions","bind","client","queue","instance","currentNode","stackTrace","inherits","prototype","protocol","options","cb","runProtocolAction","send","self","path","sessionId","method","data","using","value","result","status","seenCount","elapsed","Date","getTime","elapse","do","errorMsg","actual","expected","error","indexOf","message","fail","setTimeout","pass","assertion","format","emit","detail","pactual","pexpected","fmtmessage","isSync","assert","command","module","exports"],"mappings":"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","file":"base-mobile-assertion.js","sourcesContent":["import EventEmitter from \"events\";\nimport util from \"util\";\n\nimport settings from \"./settings\";\n\nimport errorDictionary from \"./errorDictionary\";\n\n// Wait until we've seen a selector as :visible SEEN_MAX times, with a\n// wait for WAIT_INTERVAL milliseconds between each visibility test.\nconst MAX_TIMEOUT = settings.COMMAND_MAX_TIMEOUT;\nconst WAIT_INTERVAL = settings.WAIT_INTERVAL;\nconst SEEN_MAX = settings.MOBILE_SEEN_MAX;\n\nconst Base = function (nightwatch = null) {\n  EventEmitter.call(this);\n\n  this.startTime = 0;\n  this.time = {\n    totalTime: 0,\n    seleniumCallTime: 0,\n    executeAsyncTime: 0\n  };\n\n  this.selector = null;\n\n  this.successMessage = \"\";\n  this.failureMessage = \"\";\n\n  this.checkConditions = this.checkConditions.bind(this);\n  // for mock and unit test\n  if (nightwatch) {\n    this.client = nightwatch;\n  }\n\n  if(this.client && this.client.queue && typeof(this.client.queue.instance === 'function')){\n    let instance = this.client.queue.instance();\n    if(instance && instance.currentNode){\n      this.stackTrace = instance.currentNode.stackTrace;\n    }\n  }\n};\n\nutil.inherits(Base, EventEmitter);\n\nBase.prototype.protocol = function (options, cb) {\n  this.client.runProtocolAction(options, cb).send();\n};\n\nBase.prototype.checkConditions = function () {\n  const self = this;\n\n  const options = {\n    path: `/session/${this.client.sessionId}/element`,\n    method: \"POST\",\n    data: {\n      using: this.using,\n      value: this.selector\n    }\n  };\n\n  self.protocol(options, (result) => {\n    if (result.status === 0) {\n      // sucessful\n      self.seenCount += 1;\n    }\n\n    const elapsed = (new Date()).getTime() - self.startTime;\n\n    if (self.seenCount >= SEEN_MAX || elapsed > MAX_TIMEOUT) {\n      if (self.seenCount >= SEEN_MAX) {\n        const elapse = (new Date()).getTime();\n        self.time.executeAsyncTime = elapse - self.startTime;\n        self.time.seleniumCallTime = 0;\n\n        self.do(result.value);\n      } else {\n        let errorMsg = null;\n        let actual = null;\n        let expected = null;\n        if(result.error){\n          if(result.error.indexOf(\"could not be located\") > -1){\n            errorMsg = self.message + \"[SELECTOR_NOT_FOUND]\";\n            actual = \"[not found]\";\n            expected = \"[found]\";\n          }else if(result.error.indexOf(\"not visible\") > -1){\n            errorMsg = self.message + \"[SELECTOR_NOT_VISIBLE]\";\n            actual = \"[not visible]\";\n            expected = \"[visible]\";\n          }else{\n            errorMsg = self.message + \"[\" + result.error + \"]\";\n          }\n        }\n        self.fail(actual, expected, errorMsg);\n      }\n    } else {\n      setTimeout(self.checkConditions, WAIT_INTERVAL);\n    }\n  });\n};\n\nBase.prototype.pass = function (actual, expected, message) {\n  this.time.totalTime = (new Date()).getTime() - this.startTime;\n\n  this.client.assertion(true, actual, expected,\n    util.format(this.message, this.time.totalTime), true);\n  this.emit(\"complete\");\n};\n\n/*eslint max-params:[\"error\", 4] */\nBase.prototype.fail = function (actual, expected, message, detail) {\n  const pactual = actual || \"not visible\";\n  const pexpected = expected || \"visible\";\n  this.time.totalTime = (new Date()).getTime() - this.startTime;\n  const fmtmessage = errorDictionary.format(util.format((this.isSync ? \"[sync mode] \" : \"\") + (message || this.message), this.time.totalTime));\n\n  this.client.assertion(false, pactual, pexpected, fmtmessage, true, this.stackTrace);\n  this.emit(\"complete\");\n};\n\n/**\n * All children have to implement do\n *\n */\n/* istanbul ignore next */\n/*eslint no-unused-vars:0 */\nBase.prototype.assert = function (actual, expected) { };\n\n/**\n * All children have to implement do\n *\n */\n/* istanbul ignore next */\n/*eslint no-unused-vars:0 */\nBase.prototype.do = function (value) { };\n\n/**\n * All children have to implement command\n *\n */\n/* istanbul ignore next */\n/*eslint no-unused-vars:0 */\nBase.prototype.command = function (using, selector, expected, cb) {\n  return this;\n};\n\nmodule.exports = Base;\n"]}