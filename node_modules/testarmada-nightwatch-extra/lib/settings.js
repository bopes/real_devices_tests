"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _yargs = require("yargs");

var _yargs2 = _interopRequireDefault(_yargs);

var _logger = require("./util/logger");

var _logger2 = _interopRequireDefault(_logger);

var _errorDictionary = require("./errorDictionary");

var _errorDictionary2 = _interopRequireDefault(_errorDictionary);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_MAX_TIMEOUT = 60000;
var JS_MAX_TIMEOUT_OFFSET = 5000;

var argv = _yargs2.default.alias("c", "config").alias("v", "verbose").argv;

var getConfig = function getConfig() {
  // Try a number of config locations, starting with an explicitly-overriden one, if it exists.
  var configLocations = [];

  // Configurable config location via arguments
  if (argv.config) {
    configLocations.push(_path2.default.resolve(argv.config.trim()));
  }

  // Classic config location / still used by some repos
  configLocations.push(_path2.default.resolve("./nightwatch.json"));

  // The magellan boilerplate's default config location
  configLocations.push(_path2.default.resolve("./conf/config.json"));

  // For unit test
  configLocations.push(_path2.default.resolve("./tests/conf/nightwatch.json"));

  var triedConfs = [];

  // Try a config location, if it fails, try another, and so on. If we run out of config locations
  // to try, we exit with an error and indicate all the locations we tried
  /*eslint consistent-return:0 */
  var nextConf = function nextConf() {
    var configPath = configLocations.shift();
    triedConfs.push(configPath);

    var data = void 0;
    try {
      data = _fs2.default.readFileSync(configPath, "utf8");
    } catch (e) {}
    // Eat this exception because we handle the lack of data below


    /* istanbul ignore if */
    if (!data) {
      if (configLocations.length === 0) {
        _logger2.default.err("nightwatch-extra has exhausted its " + "search for nightwatch configuration file.");
        _logger2.default.err("Tried configuration locations:");
        triedConfs.forEach(function (confLocation) {
          return _logger2.default.err("  " + confLocation);
        });
        /*eslint no-process-exit:0 */
        process.exit(1);
      } else {
        return nextConf();
      }
    } else {
      _logger2.default.log("nightwatch-magellan has found nightwatch configuration at " + configPath);
      var nightwatchConfig = JSON.parse(data);
      _errorDictionary2.default.init(process.env.NIGHTWATCH_ERROR_DICTIONARY || nightwatchConfig.test_settings.default.errorDictionary);
      return {
        nightwatchConfig: nightwatchConfig
      };
    }
  };

  return nextConf();
};

var config = getConfig();

// Screenshot Output Control:
// Usage: --screenshots=path/to/temp/screenshot/directory
// This allows external test runners to set where screenshots from the
// screenshot() command will write their files.
var screenshotPath = argv.screenshot_path ? _path2.default.resolve(argv.screenshot_path) : _path2.default.resolve("./temp");

// Parameter for COMMAND_MAX_TIMEOUT
// This allows a config file to set it's own timeout value, will default to 60000
var timeoutValue = config.nightwatchConfig.test_settings.default.max_timeout || DEFAULT_MAX_TIMEOUT;
var jsTimeoutValue = timeoutValue - JS_MAX_TIMEOUT_OFFSET;

// Switch for asynchronous js injection
// This allows to run asynchronous js injection for a faster element
// detection/operation in some browsers
var syncModeBrowserList = ["iphone", "ipad"];
if (config.nightwatchConfig.test_settings.default.globals && Array.isArray(config.nightwatchConfig.test_settings.default.globals.syncModeBrowserList)) {
  // if browser in sync mode is defined in nightwatch.json
  syncModeBrowserList = config.nightwatchConfig.test_settings.default.globals.syncModeBrowserList;
}

var env = argv.env;

exports.default = {
  WAIT_INTERVAL: 100,
  JS_WAIT_INTERNAL: 100,
  MOBILE_SEEN_MAX: 1,
  SEEN_MAX: 3,
  JS_SEEN_MAX: 3,
  COMMAND_MAX_TIMEOUT: timeoutValue,
  JS_MAX_TIMEOUT: jsTimeoutValue,

  // true if test is launched by a specific runner other than nightwatch, such as magellan
  isWorker: !!argv.worker,
  env: env,
  verbose: argv.verbose,

  sessionId: undefined,

  nightwatchConfig: config.nightwatchConfig,

  screenshotPath: screenshotPath,
  syncModeBrowserList: syncModeBrowserList
};
//# sourceMappingURL=settings.js.map