{"version":3,"sources":["../../src/appium/stop.js"],"names":["pid","process","ZOMBIE_POLLING_MAX_TIME","killZombieProcess","callback","debug","getZombieChildren","zombieChildren","length","log","killNextZombie","nextZombieTreePid","shift","kill","stopAppium","client","appiumServer","close","then","catch","err","module","exports"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,IAAMA,MAAMC,QAAQD,GAApB;;AAEA;AACA,IAAME,0BAA0B,KAAhC;;AAEA,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,QAAD,EAAc;AACtC,mBAAOC,KAAP,CAAa,wCAAb;;AAEA,+BAASC,iBAAT,CAA2BN,GAA3B,EAAgCE,uBAAhC,EAAyD,UAACK,cAAD,EAAoB;AAC3E,QAAIA,eAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,uBAAOC,GAAP,CAAW,oEAAX;AACA;AACA,UAAMC,iBAAiB,SAAjBA,cAAiB,GAAM;AAC3B,YAAIH,eAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,cAAMG,oBAAoBJ,eAAeK,KAAf,EAA1B;AACA,2BAAOH,GAAP,sCAA+CE,iBAA/C;AACA,uCAASE,IAAT,CAAcF,iBAAd,EAAiC,SAAjC,EAA4CD,cAA5C;AACD,SAJD,MAIO;AACL,2BAAOD,GAAP,CAAW,uBAAX;AACA,iBAAOL,UAAP;AACD;AACF,OATD;;AAWA,aAAOM,gBAAP;AACD,KAfD,MAeO;AACL,uBAAOL,KAAP,CAAa,mBAAb;AACA,aAAOD,UAAP;AACD;AACF,GApBD;AAqBD,CAxBD;;AA2BA;AACA,IAAMU,aAAa,SAAbA,UAAa,CAAUC,MAAV,EAAkBX,QAAlB,EAA4B;AAC7C,MAAIW,OAAOC,YAAX,EAAyB;AACvBD,WAAOC,YAAP,CACGC,KADH,GAEGC,IAFH,CAEQ,YAAM;AACVH,aAAOC,YAAP,GAAsB,IAAtB;AACA,uBAAOP,GAAP,CAAW,0BAAX;AACAN,wBAAkBC,QAAlB;AACD,KANH,EAOGe,KAPH,CAOS,UAACC,GAAD,EAAS;AACd,uBAAOA,GAAP,gDAAwDA,GAAxD;AACAjB,wBAAkBC,QAAlB;AACD,KAVH;AAWD,GAZD,MAYO;AACL,qBAAOK,GAAP,CAAW,8DAAX;AACAL;AACD;AACF,CAjBD;;AAmBAiB,OAAOC,OAAP,GAAiBR,UAAjB","file":"stop.js","sourcesContent":["import treeUtil from \"testarmada-tree-kill\";\nimport logger from \"../util/logger\";\n\nconst pid = process.pid;\n\n// Max time before we forcefully kill child processes left over after a suite run\nconst ZOMBIE_POLLING_MAX_TIME = 10000;\n\nconst killZombieProcess = (callback) => {\n  logger.debug(\"Checking for zombie child processes...\");\n\n  treeUtil.getZombieChildren(pid, ZOMBIE_POLLING_MAX_TIME, (zombieChildren) => {\n    if (zombieChildren.length > 0) {\n      logger.log(\"Giving up waiting for zombie child processes to die. Cleaning up..\");\n      /* eslint-disable consistent-return,callback-return */\n      const killNextZombie = () => {\n        if (zombieChildren.length > 0) {\n          const nextZombieTreePid = zombieChildren.shift();\n          logger.log(`Killing pid and its child pids: ${ nextZombieTreePid}`);\n          treeUtil.kill(nextZombieTreePid, \"SIGKILL\", killNextZombie);\n        } else {\n          logger.log(\"Done killing zombies.\");\n          return callback();\n        }\n      };\n\n      return killNextZombie();\n    } else {\n      logger.debug(\"No zombies found.\");\n      return callback();\n    }\n  });\n};\n\n\n/* eslint-disable consistent-return,callback-return */\nconst stopAppium = function (client, callback) {\n  if (client.appiumServer) {\n    client.appiumServer\n      .close()\n      .then(() => {\n        client.appiumServer = null;\n        logger.log(\"Appium server is stopped\");\n        killZombieProcess(callback);\n      })\n      .catch((err) => {\n        logger.err(`Appium server isn't stopped successfully, ${err}`);\n        killZombieProcess(callback);\n      });\n  } else {\n    logger.log(\"No appium is configured in nightwatch.json, skip appium stop\");\n    callback();\n  }\n};\n\nmodule.exports = stopAppium;\n"]}