{"version":3,"sources":["../../src/appium/start.js"],"names":["startAppium","client","test_settings","callback","appium","start_process","loglevel","verbose","require","main","config","assign","omit","throwInsteadOfExit","port","selenium_port","debug","JSON","stringify","then","server","log","appiumServer","e","err","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,cAAc,SAAdA,WAAc,CAAUC,MAAV,EAAkBC,aAAlB,EAAiCC,QAAjC,EAA2C;AAC7D,MAAID,cAAcE,MAAd,IAAwBF,cAAcE,MAAd,CAAqBC,aAAjD,EAAgE;;AAE9D,QAAIC,WAAWJ,cAAcE,MAAd,CAAqBE,QAArB,GACbJ,cAAcE,MAAd,CAAqBE,QADR,GACmB,MADlC;;AAGA,QAAI,mBAASC,OAAb,EAAsB;AACpBD,iBAAW,OAAX;AACD;;AAED,QAAI;AACF;AACA,UAAMF,SAASI,QAAQ,uBAAR,EAAiCC,IAAhD;AACA,UAAMC,SAAS,iBAAEC,MAAF,CAAS,EAAT,EACb,iBAAEC,IAAF,CAAOV,cAAcE,MAArB,EAA6B,eAA7B,CADa,EAEb;AACES,4BAAoB,IADtB;AAEEP,0BAFF;AAGEQ,cAAMZ,cAAca;AAHtB,OAFa,CAAf;;AAQA,uBAAOC,KAAP,CAAaC,KAAKC,SAAL,CAAeR,MAAf,CAAb;;AAEAN,aAAOM,MAAP,EAAeS,IAAf,CAAoB,UAACC,MAAD,EAAY;AAC9B,yBAAOC,GAAP,CAAW,2BAAX;AACApB,eAAOqB,YAAP,GAAsBF,MAAtB;AACAjB;AACD,OAJD;AAKD,KAlBD,CAkBE,OAAOoB,CAAP,EAAU;AACV,uBAAOC,GAAP,iDAAyDD,CAAzD;AACA;AACApB,eAASoB,CAAT;AACD;AACF,GAhCD,MAgCO;AACL,qBAAOF,GAAP,CAAW,+DAAX;AACAlB;AACD;AACF,CArCD;;AAuCAsB,OAAOC,OAAP,GAAiB1B,WAAjB","file":"start.js","sourcesContent":["import logger from \"../util/logger\";\nimport settings from \"../settings\";\nimport _ from \"lodash\";\n\n/* eslint-disable consistent-return,callback-return,camelcase */\nconst startAppium = function (client, test_settings, callback) {\n  if (test_settings.appium && test_settings.appium.start_process) {\n\n    let loglevel = test_settings.appium.loglevel ?\n      test_settings.appium.loglevel : \"info\";\n\n    if (settings.verbose) {\n      loglevel = \"debug\";\n    }\n\n    try {\n      /*eslint-disable global-require*/\n      const appium = require(\"appium/build/lib/main\").main;\n      const config = _.assign({},\n        _.omit(test_settings.appium, \"start_process\"),\n        {\n          throwInsteadOfExit: true,\n          loglevel,\n          port: test_settings.selenium_port\n        });\n\n      logger.debug(JSON.stringify(config));\n\n      appium(config).then((server) => {\n        logger.log(\"Appium server is launched\");\n        client.appiumServer = server;\n        callback();\n      });\n    } catch (e) {\n      logger.err(`Appium server isn't launched successfully, ${e}`);\n      // where appium isnt found\n      callback(e);\n    }\n  } else {\n    logger.log(\"No appium is configured in nightwatch.json, skip appium start\");\n    callback();\n  }\n};\n\nmodule.exports = startAppium;\n"]}