"use strict";

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _request = require("request");

var _request2 = _interopRequireDefault(_request);

var _logger = require("./util/logger");

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dictionary = void 0;

module.exports = {
  init: function init(config) {
    if (!dictionary && config) {

      // check if file or directory
      if (typeof config === 'string' && _fs2.default.existsSync(config)) {
        // error if directory
        if (!_fs2.default.lstatSync(config).isFile()) {
          _logger2.default.warn("Error reading nightwatch extra dictionary from [" + config + "]. Path must be a file!");
          return;
        }
        var content = _fs2.default.readFileSync(config, 'utf8');
        try {
          dictionary = JSON.parse(content);
        } catch (e) {
          // error if JSON parse fails
          _logger2.default.warn("Error parsing nightwatch extra dictionary from file [" + config + "]. File Content: [" + content + "]. " + e + ". Contents must be a valid json object with key/value pairs.");
        }
      } else {

        // try to parse string if it's json
        if (typeof config === 'string' && config.startsWith("{")) {
          try {
            config = JSON.parse(config);
          } catch (e) {
            // error if invalid
            _logger2.default.warn("Error loading error dictionary from [" + config + "]. " + e + ". Config should be a valid file string, url string, or a url object accpted by https://github.com/request/request#requestoptions-callback.");
            return;
          }
        }

        (0, _request2.default)(config, function (error, response, body) {
          if (error) {
            _logger2.default.warn("Error loading error dictionary from [" + JSON.stringify(config) + "]. " + error + ". Config should be a valid file string, url string, or a url object accpted by https://github.com/request/request#requestoptions-callback.");
            return;
          }
          try {
            dictionary = JSON.parse(body);
          } catch (e) {
            _logger2.default.warn("Error parsing nightwatch extra dictionary. Dictionary: [" + JSON.stringify(body) + "]. " + e + ". Contents must be a valid json object with key/value pairs.");
          }
        });
      }
    }
  },
  format: function format(error) {
    var ret = error;
    if (dictionary) {
      for (var key in dictionary) {
        var value = dictionary[key];
        var regex = new RegExp(key);
        if (error.match(regex)) {
          ret = error.replace(regex, value);
        }
      }
    }
    return ret;
  }
};
//# sourceMappingURL=errorDictionary.js.map