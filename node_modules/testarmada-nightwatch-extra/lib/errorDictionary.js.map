{"version":3,"sources":["../src/errorDictionary.js"],"names":["dictionary","module","exports","init","config","existsSync","lstatSync","isFile","warn","content","readFileSync","JSON","parse","e","startsWith","error","response","body","stringify","format","ret","key","value","regex","RegExp","match","replace"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,mBAAJ;;AAEAC,OAAOC,OAAP,GAAiB;AACfC,QAAM,cAAUC,MAAV,EAAkB;AACtB,QAAG,CAACJ,UAAD,IAAeI,MAAlB,EAAyB;;AAEvB;AACA,UAAG,OAAOA,MAAP,KAAmB,QAAnB,IAA+B,aAAGC,UAAH,CAAcD,MAAd,CAAlC,EAAwD;AACtD;AACA,YAAG,CAAC,aAAGE,SAAH,CAAaF,MAAb,EAAqBG,MAArB,EAAJ,EAAkC;AAChC,2BAAOC,IAAP,CAAY,qDAAqDJ,MAArD,GAA8D,yBAA1E;AACA;AACD;AACD,YAAIK,UAAU,aAAGC,YAAH,CAAgBN,MAAhB,EAAwB,MAAxB,CAAd;AACA,YAAG;AACDJ,uBAAaW,KAAKC,KAAL,CAAWH,OAAX,CAAb;AACD,SAFD,CAEC,OAAMI,CAAN,EAAQ;AACP;AACA,2BAAOL,IAAP,CAAY,0DAA0DJ,MAA1D,GAAmE,oBAAnE,GAA0FK,OAA1F,GAAoG,KAApG,GAA4GI,CAA5G,GAAgH,8DAA5H;AACD;AACF,OAbD,MAaK;;AAEH;AACA,YAAG,OAAOT,MAAP,KAAmB,QAAnB,IAA+BA,OAAOU,UAAP,CAAkB,GAAlB,CAAlC,EAAyD;AACvD,cAAG;AACDV,qBAASO,KAAKC,KAAL,CAAWR,MAAX,CAAT;AACD,WAFD,CAEC,OAAMS,CAAN,EAAQ;AACP;AACA,6BAAOL,IAAP,CAAY,0CAA0CJ,MAA1C,GAAmD,KAAnD,GAA2DS,CAA3D,GAA+D,4IAA3E;AACA;AACD;AACF;;AAED,+BAAQT,MAAR,EAAgB,UAAUW,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC/C,cAAGF,KAAH,EAAS;AACP,6BAAOP,IAAP,CAAY,0CAA0CG,KAAKO,SAAL,CAAed,MAAf,CAA1C,GAAmE,KAAnE,GAA2EW,KAA3E,GAAmF,4IAA/F;AACA;AACD;AACD,cAAG;AACDf,yBAAaW,KAAKC,KAAL,CAAWK,IAAX,CAAb;AACD,WAFD,CAEC,OAAMJ,CAAN,EAAQ;AACP,6BAAOL,IAAP,CAAY,6DAA6DG,KAAKO,SAAL,CAAeD,IAAf,CAA7D,GAAoF,KAApF,GAA4FJ,CAA5F,GAAgG,8DAA5G;AACD;AACF,SAVD;AAWD;AACF;AACF,GA5Cc;AA6CfM,UAAQ,gBAAUJ,KAAV,EAAiB;AACvB,QAAIK,MAAML,KAAV;AACA,QAAGf,UAAH,EAAc;AACZ,WAAI,IAAIqB,GAAR,IAAerB,UAAf,EAA0B;AACxB,YAAIsB,QAAQtB,WAAWqB,GAAX,CAAZ;AACA,YAAIE,QAAQ,IAAIC,MAAJ,CAAWH,GAAX,CAAZ;AACA,YAAGN,MAAMU,KAAN,CAAYF,KAAZ,CAAH,EAAsB;AACpBH,gBAAML,MAAMW,OAAN,CAAcH,KAAd,EAAqBD,KAArB,CAAN;AACD;AACF;AACF;AACD,WAAOF,GAAP;AACD;AAzDc,CAAjB","file":"errorDictionary.js","sourcesContent":["import fs from \"fs\";\nimport request from \"request\";\nimport logger from \"./util/logger\";\n\nlet dictionary;\n\nmodule.exports = {\n  init: function (config) {\n    if(!dictionary && config){\n\n      // check if file or directory\n      if(typeof(config) === 'string' && fs.existsSync(config)){\n        // error if directory\n        if(!fs.lstatSync(config).isFile()){\n          logger.warn(\"Error reading nightwatch extra dictionary from [\" + config + \"]. Path must be a file!\");\n          return;\n        }\n        let content = fs.readFileSync(config, 'utf8');\n        try{\n          dictionary = JSON.parse(content);\n        }catch(e){\n          // error if JSON parse fails\n          logger.warn(\"Error parsing nightwatch extra dictionary from file [\" + config + \"]. File Content: [\" + content + \"]. \" + e + \". Contents must be a valid json object with key/value pairs.\");\n        }\n      }else{\n\n        // try to parse string if it's json\n        if(typeof(config) === 'string' && config.startsWith(\"{\")){\n          try{\n            config = JSON.parse(config);\n          }catch(e){\n            // error if invalid\n            logger.warn(\"Error loading error dictionary from [\" + config + \"]. \" + e + \". Config should be a valid file string, url string, or a url object accpted by https://github.com/request/request#requestoptions-callback.\");\n            return;\n          }\n        }\n\n        request(config, function (error, response, body) {\n          if(error){\n            logger.warn(\"Error loading error dictionary from [\" + JSON.stringify(config) + \"]. \" + error + \". Config should be a valid file string, url string, or a url object accpted by https://github.com/request/request#requestoptions-callback.\");\n            return;\n          }\n          try{\n            dictionary = JSON.parse(body);\n          }catch(e){\n            logger.warn(\"Error parsing nightwatch extra dictionary. Dictionary: [\" + JSON.stringify(body) + \"]. \" + e + \". Contents must be a valid json object with key/value pairs.\");\n          }\n        });\n      }\n    }\n  },\n  format: function (error) {\n    let ret = error;\n    if(dictionary){\n      for(var key in dictionary){\n        let value = dictionary[key];\n        let regex = new RegExp(key);\n        if(error.match(regex)){\n          ret = error.replace(regex, value);\n        }\n      }\n    }\n    return ret;\n  }\n}"]}