"use strict";

const acorn = require("acorn");
const fs = require("fs");
const walk = require("acorn/dist/walk");
const path = require("path");

const getTags = (f) => {
  // Filter by tag (or tag list):
  //
  // Parse the syntax tree of each included test and search for a property
  // definition with the name "tags" with an array expression attached to it,
  // i.e. we"re looking for source code in the following form:
  //
  //    tags: [ value, value, value ]
  //
  // Match each f in files against the tag list we have in the array tags.
  //
  const localTags = [];
  const filename = path.resolve(f);
  let root;
  try {
    root = acorn.parse(fs.readFileSync(filename), {
      ecmaVersion: 6
    });
  } catch (err) {
    throw err;
  }

  walk.findNodeAt(root, null, null, (nodeType, node) => {
    // Don"t continue scanning if we"ve already passed or if we"ve already
    // found the tags: [] structure.
    if (nodeType === "Property" && node.key && node.key.name === "tags"
        && node.value && node.value.type === "ArrayExpression" && node.value.elements) {
      // Collect the tags this test matches
      node.value.elements.forEach((tagNode) => {
        if (tagNode.value && typeof tagNode.value === "string") {
          localTags.push(tagNode.value.trim());
        }
      });
    }
  });

  return localTags;
};

module.exports = getTags;
