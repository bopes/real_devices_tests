"use strict";

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _testarmadaLogger = require("testarmada-logger");

var _testarmadaLogger2 = _interopRequireDefault(_testarmadaLogger);

var _safeJsonStringify = require("safe-json-stringify");

var _safeJsonStringify2 = _interopRequireDefault(_safeJsonStringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DPRO_ENV = process.env.DPRO || "default.js";
var DPRO_INST = process.env.DPRO_INST;
var DPRO_LOCATION = process.env.DPRO_LOCATION;

var appendPrefix = function appendPrefix(str) {
  if (!_lodash2.default.endsWith(str, ".js") && !_lodash2.default.endsWith(str, ".json")) {
    return str + ".js";
  }
  return str;
};

_testarmadaLogger2.default.prefix = "Dpro";

/**
 * Load data from given file(s), normally ${dproLocationParam}/${dproEnvParam}.js.
 * If both dproEnvParam and dproInstParam are given, and common data exits,
 * use the one in ${dproLocationParam}/${dproEnvParam_dproInstParam}.js
 */

module.exports = function provideData(_ref) /* should'nt have a real use case with noncache = true*/{
  var _ref$dproEnv = _ref.dproEnv,
      dproEnv = _ref$dproEnv === undefined ? null : _ref$dproEnv,
      _ref$dproInst = _ref.dproInst,
      dproInst = _ref$dproInst === undefined ? null : _ref$dproInst,
      _ref$dproLocation = _ref.dproLocation,
      dproLocation = _ref$dproLocation === undefined ? null : _ref$dproLocation;
  var nocache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var dproEnvParam = dproEnv || DPRO_ENV;
  var dproInstParam = dproInst || DPRO_INST;
  var dproLocationParam = dproLocation || DPRO_LOCATION || "./conf/data/";

  if (!dproEnvParam) {
    // no data is loaded, return an empty data set
    _testarmadaLogger2.default.warn("No data file is loaded");
    return {};
  }

  // init
  var envData = {};
  var instanceData = {};
  var filename = null;

  try {
    // load envData

    var penv = _path2.default.join(process.cwd(), dproLocationParam, dproEnvParam);
    if (nocache) {
      delete require.cache[appendPrefix(penv)];
    }
    /*eslint-disable global-require*/
    envData = require(penv);
    filename = appendPrefix(penv);
  } catch (e) {
    // if error happens, return instead of throwing an error out
    _testarmadaLogger2.default.err("Failed in loading data: " + e.toString());
    return {};
  }

  // only load instanceData on demand
  if (dproInstParam) {
    try {
      // load instanceData
      var pinstance = _path2.default.join(process.cwd(), dproLocationParam, dproEnvParam + "-" + dproInstParam);

      if (nocache) {
        delete require.cache[appendPrefix(pinstance)];
      }
      /*eslint-disable global-require*/
      instanceData = require(pinstance);
      filename = appendPrefix(pinstance);
    } catch (e) {
      // if error happens, log it out only
      _testarmadaLogger2.default.err("Failed in loading data file " + (appendPrefix(dproEnvParam + "-" + dproInstParam) + ": " + e.toString()));
      _testarmadaLogger2.default.warn("Use data file " + filename + " only");
    }
  }

  var data = _lodash2.default.assign(envData, instanceData);

  _testarmadaLogger2.default.log("Loaded data file " + filename);
  _testarmadaLogger2.default.debug("Loaded data content: " + (0, _safeJsonStringify2.default)(data));

  return data;
};
//# sourceMappingURL=dpro.js.map