{"version":3,"sources":["../../test/dpro.test.js"],"names":["expect","assert","describe","config","beforeEach","dproEnv","dproInst","dproLocation","it","dpro","temconfigstr","to","equal","temconfigint","temconfigbool","eql","addon"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,SAAS,eAAKA,MAApB;AACA,IAAMC,SAAS,eAAKA,MAApB;;AAEAC,SAAS,MAAT,EAAiB,YAAM;AACrB,MAAIC,SAAS,EAAb;;AAEAC,aAAW,YAAM;AACfD,aAAS;AACPE,eAAS,IADF;AAEPC,gBAAU,IAFH;AAGPC,oBAAc;AAHP,KAAT;AAKD,GAND;;AAQAC,KAAG,sBAAH,EAA2B,YAAM;AAC/B,QAAIC,OAAO,oBAAYN,MAAZ,EAAoB,IAApB,CAAX;AACAH,WAAOS,KAAKC,YAAZ,EAA0BC,EAA1B,CAA6BC,KAA7B,CAAmC,SAAnC;AACAZ,WAAOS,KAAKI,YAAZ,EAA0BF,EAA1B,CAA6BC,KAA7B,CAAmC,CAAnC;AACAZ,WAAOS,KAAKK,aAAZ,EAA2BH,EAA3B,CAA8BC,KAA9B,CAAoC,KAApC;AACD,GALD;;AAOAJ,KAAG,kCAAH,EAAuC,YAAM;AAC3CL,WAAOE,OAAP,GAAiB,SAAjB;AACA,QAAII,OAAO,oBAAYN,MAAZ,EAAoB,IAApB,CAAX;AACAH,WAAOS,KAAKC,YAAZ,EAA0BC,EAA1B,CAA6BC,KAA7B,CAAmC,SAAnC;AACAZ,WAAOS,KAAKI,YAAZ,EAA0BF,EAA1B,CAA6BC,KAA7B,CAAmC,CAAnC;AACAZ,WAAOS,KAAKK,aAAZ,EAA2BH,EAA3B,CAA8BC,KAA9B,CAAoC,KAApC;AACD,GAND;;AAQAJ,KAAG,iBAAH,EAAsB,YAAM;AAC1BL,WAAOE,OAAP,GAAiB,MAAjB;AACA,QAAII,OAAO,oBAAYN,MAAZ,EAAoB,IAApB,CAAX;AACAH,WAAOS,KAAKC,YAAZ,EAA0BC,EAA1B,CAA6BC,KAA7B,CAAmC,YAAnC;AACAZ,WAAOS,KAAKI,YAAZ,EAA0BF,EAA1B,CAA6BC,KAA7B,CAAmC,CAAnC;AACAZ,WAAOS,KAAKK,aAAZ,EAA2BH,EAA3B,CAA8BC,KAA9B,CAAoC,KAApC;AACD,GAND;;AAQAJ,KAAG,oDAAH,EAAyD,YAAM;AAC7DL,WAAOI,YAAP,GAAsB,eAAtB;AACA,QAAIE,OAAO,oBAAYN,MAAZ,EAAoB,IAApB,CAAX;AACAH,WAAOS,IAAP,EAAaE,EAAb,CAAgBI,GAAhB,CAAoB,EAApB;AACD,GAJD;;AAMAP,KAAG,wBAAH,EAA6B,YAAM;AACjCL,WAAOE,OAAP,GAAiB,GAAjB;AACAF,WAAOG,QAAP,GAAkB,KAAlB;AACA,QAAIG,OAAO,oBAAYN,MAAZ,EAAoB,IAApB,CAAX;AACAH,WAAOS,KAAKC,YAAZ,EAA0BC,EAA1B,CAA6BC,KAA7B,CAAmC,YAAnC;AACAZ,WAAOS,KAAKI,YAAZ,EAA0BF,EAA1B,CAA6BC,KAA7B,CAAmC,CAAnC;AACAZ,WAAOS,KAAKK,aAAZ,EAA2BH,EAA3B,CAA8BC,KAA9B,CAAoC,KAApC;AACAZ,WAAOS,KAAKO,KAAZ,EAAmBL,EAAnB,CAAsBC,KAAtB,CAA4B,KAA5B;AACD,GARD;;AAUAJ,KAAG,+CAAH,EAAoD,YAAM;AACxDL,WAAOE,OAAP,GAAiB,GAAjB;AACAF,WAAOG,QAAP,GAAkB,UAAlB;AACA,QAAIG,OAAO,oBAAYN,MAAZ,EAAoB,IAApB,CAAX;;AAEAH,WAAOS,KAAKC,YAAZ,EAA0BC,EAA1B,CAA6BC,KAA7B,CAAmC,YAAnC;AACAZ,WAAOS,KAAKI,YAAZ,EAA0BF,EAA1B,CAA6BC,KAA7B,CAAmC,CAAnC;AACAZ,WAAOS,KAAKK,aAAZ,EAA2BH,EAA3B,CAA8BC,KAA9B,CAAoC,KAApC;AACD,GARD;AASD,CA3DD","file":"dpro.test.js","sourcesContent":["\"use strict\";\n\nimport chai from \"chai\";\nimport _ from \"lodash\";\nimport path from \"path\";\n\nimport provideData from \"../dpro\";\n\nconst expect = chai.expect;\nconst assert = chai.assert;\n\ndescribe(\"DPRO\", () => {\n  let config = {};\n\n  beforeEach(() => {\n    config = {\n      dproEnv: null,\n      dproInst: null,\n      dproLocation: \"./dist/test/data\"\n    };\n  });\n\n  it(\"Use default DPRO_ENV\", () => {\n    let dpro = provideData(config, true);\n    expect(dpro.temconfigstr).to.equal(\"default\");\n    expect(dpro.temconfigint).to.equal(1);\n    expect(dpro.temconfigbool).to.equal(false);\n  });\n\n  it(\"Pass default DPRO_ENV explicitly\", () => {\n    config.dproEnv = \"default\";\n    let dpro = provideData(config, true);\n    expect(dpro.temconfigstr).to.equal(\"default\");\n    expect(dpro.temconfigint).to.equal(1);\n    expect(dpro.temconfigbool).to.equal(false);\n  });\n\n  it(\"Change DPRO_ENV\", () => {\n    config.dproEnv = \"d.js\";\n    let dpro = provideData(config, true);\n    expect(dpro.temconfigstr).to.equal(\"notdefault\");\n    expect(dpro.temconfigint).to.equal(1);\n    expect(dpro.temconfigbool).to.equal(false);\n  });\n\n  it(\"Return empty object if DPRO_LOCATION isn't correct\", () => {\n    config.dproLocation = \"./doesntexist\";\n    let dpro = provideData(config, true);\n    expect(dpro).to.eql({});\n  });\n\n  it(\"Use instance DPRO_INST\", () => {\n    config.dproEnv = \"d\";\n    config.dproInst = \"qa1\";\n    let dpro = provideData(config, true);\n    expect(dpro.temconfigstr).to.equal(\"notdefault\");\n    expect(dpro.temconfigint).to.equal(2);\n    expect(dpro.temconfigbool).to.equal(false);\n    expect(dpro.addon).to.equal(false);\n  });\n\n  it(\"Read DPRO_ENV only if DPRO_INST isn't correct\", () => {\n    config.dproEnv = \"d\";\n    config.dproInst = \"nonexist\";\n    let dpro = provideData(config, true);\n\n    expect(dpro.temconfigstr).to.equal(\"notdefault\");\n    expect(dpro.temconfigint).to.equal(1);\n    expect(dpro.temconfigbool).to.equal(false);\n  });\n});"]}