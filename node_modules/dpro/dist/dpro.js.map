{"version":3,"sources":["../lib/dpro.js"],"names":["DPRO_ENV","process","env","DPRO","DPRO_INST","DPRO_LOCATION","appendPrefix","str","endsWith","prefix","module","exports","provideData","dproEnv","dproInst","dproLocation","nocache","dproEnvParam","dproInstParam","dproLocationParam","warn","envData","instanceData","filename","penv","join","cwd","require","cache","e","err","toString","pinstance","data","assign","log","debug"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAWC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,YAArC;AACA,IAAMC,YAAYH,QAAQC,GAAR,CAAYE,SAA9B;AACA,IAAMC,gBAAgBJ,QAAQC,GAAR,CAAYG,aAAlC;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,GAAD,EAAS;AAC5B,MAAI,CAAC,iBAAEC,QAAF,CAAWD,GAAX,EAAgB,KAAhB,CAAD,IAA2B,CAAC,iBAAEC,QAAF,CAAWD,GAAX,EAAgB,OAAhB,CAAhC,EAA0D;AACxD,WAAUA,GAAV;AACD;AACD,SAAOA,GAAP;AACD,CALD;;AAOA,2BAAOE,MAAP,GAAgB,MAAhB;;AAEA;;;;;;AAMAC,OAAOC,OAAP,GAAiB,SAASC,WAAT,OACC,wDAA0D;AAAA,0BADpCC,OACoC;AAAA,MADpCA,OACoC,gCAD1B,IAC0B;AAAA,2BADpBC,QACoB;AAAA,MADpBA,QACoB,iCADT,IACS;AAAA,+BADHC,YACG;AAAA,MADHA,YACG,qCADY,IACZ;AAAA,MAA1EC,OAA0E,uEAAhE,KAAgE;;AAC1E,MAAMC,eAAeJ,WAAWb,QAAhC;AACA,MAAMkB,gBAAgBJ,YAAYV,SAAlC;AACA,MAAMe,oBAAoBJ,gBAAgBV,aAAhB,IAAiC,cAA3D;;AAEA,MAAI,CAACY,YAAL,EAAmB;AACjB;AACA,+BAAOG,IAAP,CAAY,wBAAZ;AACA,WAAO,EAAP;AACD;;AAED;AACA,MAAIC,UAAU,EAAd;AACA,MAAIC,eAAe,EAAnB;AACA,MAAIC,WAAW,IAAf;;AAEA,MAAI;AACF;;AAEA,QAAMC,OAAO,eAAKC,IAAL,CAAUxB,QAAQyB,GAAR,EAAV,EAAyBP,iBAAzB,EAA4CF,YAA5C,CAAb;AACA,QAAID,OAAJ,EAAa;AACX,aAAOW,QAAQC,KAAR,CAActB,aAAakB,IAAb,CAAd,CAAP;AACD;AACD;AACAH,cAAUM,QAAQH,IAAR,CAAV;AACAD,eAAWjB,aAAakB,IAAb,CAAX;AACD,GAVD,CAUE,OAAOK,CAAP,EAAU;AACV;AACA,+BAAOC,GAAP,8BAAsCD,EAAEE,QAAF,EAAtC;AACA,WAAO,EAAP;AACD;;AAED;AACA,MAAIb,aAAJ,EAAmB;AACjB,QAAI;AACF;AACA,UAAMc,YAAY,eAAKP,IAAL,CAAUxB,QAAQyB,GAAR,EAAV,EAChBP,iBADgB,EAEbF,YAFa,SAEGC,aAFH,CAAlB;;AAIA,UAAIF,OAAJ,EAAa;AACX,eAAOW,QAAQC,KAAR,CAActB,aAAa0B,SAAb,CAAd,CAAP;AACD;AACD;AACAV,qBAAeK,QAAQK,SAAR,CAAf;AACAT,iBAAWjB,aAAa0B,SAAb,CAAX;AACD,KAZD,CAYE,OAAOH,CAAP,EAAU;AACV;AACA,iCAAOC,GAAP,CAAW,kCACJxB,aAAgBW,YAAhB,SAAgCC,aAAhC,CADI,UACiDW,EAAEE,QAAF,EADjD,CAAX;AAEA,iCAAOX,IAAP,oBAA6BG,QAA7B;AACD;AACF;;AAED,MAAMU,OAAO,iBAAEC,MAAF,CAASb,OAAT,EAAkBC,YAAlB,CAAb;;AAEA,6BAAOa,GAAP,uBAA+BZ,QAA/B;AACA,6BAAOa,KAAP,2BAAqC,iCAAkBH,IAAlB,CAArC;;AAEA,SAAOA,IAAP;AACD,CA7DD","file":"dpro.js","sourcesContent":["import path from \"path\";\nimport _ from \"lodash\";\nimport logger from \"testarmada-logger\";\nimport safeJsonStringify from \"safe-json-stringify\";\n\nconst DPRO_ENV = process.env.DPRO || \"default.js\";\nconst DPRO_INST = process.env.DPRO_INST;\nconst DPRO_LOCATION = process.env.DPRO_LOCATION;\n\nconst appendPrefix = (str) => {\n  if (!_.endsWith(str, \".js\") && !_.endsWith(str, \".json\")) {\n    return `${str}.js`;\n  }\n  return str;\n};\n\nlogger.prefix = \"Dpro\";\n\n/**\n * Load data from given file(s), normally ${dproLocationParam}/${dproEnvParam}.js.\n * If both dproEnvParam and dproInstParam are given, and common data exits,\n * use the one in ${dproLocationParam}/${dproEnvParam_dproInstParam}.js\n */\n\nmodule.exports = function provideData({ dproEnv = null, dproInst = null, dproLocation = null },\n  nocache = false /* should'nt have a real use case with noncache = true*/) {\n  const dproEnvParam = dproEnv || DPRO_ENV;\n  const dproInstParam = dproInst || DPRO_INST;\n  const dproLocationParam = dproLocation || DPRO_LOCATION || \"./conf/data/\";\n\n  if (!dproEnvParam) {\n    // no data is loaded, return an empty data set\n    logger.warn(\"No data file is loaded\");\n    return {};\n  }\n\n  // init\n  let envData = {};\n  let instanceData = {};\n  let filename = null;\n\n  try {\n    // load envData\n\n    const penv = path.join(process.cwd(), dproLocationParam, dproEnvParam);\n    if (nocache) {\n      delete require.cache[appendPrefix(penv)];\n    }\n    /*eslint-disable global-require*/\n    envData = require(penv);\n    filename = appendPrefix(penv);\n  } catch (e) {\n    // if error happens, return instead of throwing an error out\n    logger.err(`Failed in loading data: ${e.toString()}`);\n    return {};\n  }\n\n  // only load instanceData on demand\n  if (dproInstParam) {\n    try {\n      // load instanceData\n      const pinstance = path.join(process.cwd(),\n        dproLocationParam,\n        `${dproEnvParam}-${dproInstParam}`);\n\n      if (nocache) {\n        delete require.cache[appendPrefix(pinstance)];\n      }\n      /*eslint-disable global-require*/\n      instanceData = require(pinstance);\n      filename = appendPrefix(pinstance);\n    } catch (e) {\n      // if error happens, log it out only\n      logger.err(`Failed in loading data file `\n        + `${appendPrefix(`${dproEnvParam}-${dproInstParam}`)}: ${e.toString()}`);\n      logger.warn(`Use data file ${filename} only`);\n    }\n  }\n\n  const data = _.assign(envData, instanceData);\n\n  logger.log(`Loaded data file ${filename}`);\n  logger.debug(`Loaded data content: ${safeJsonStringify(data)}`);\n\n  return data;\n};\n"]}